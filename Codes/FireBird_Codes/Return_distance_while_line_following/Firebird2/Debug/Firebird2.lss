
Firebird2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800200  00000f24  00000fb8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f24  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800208  00800208  00000fc0  2**0
                  ALLOC
  3 .stab         00001e9c  00000000  00000000  00000fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006a7  00000000  00000000  00002e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c0  00000000  00000000  00003508  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010c4  00000000  00000000  000035c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000037c  00000000  00000000  0000468c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e5  00000000  00000000  00004a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  000050f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000420  00000000  00000000  00005438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c0  00000000  00000000  00005858  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 68 04 	jmp	0x8d0	; 0x8d0 <__vector_5>
  18:	0c 94 43 04 	jmp	0x886	; 0x886 <__vector_6>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 e2       	ldi	r30, 0x24	; 36
  fc:	ff e0       	ldi	r31, 0x0F	; 15
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a8 30       	cpi	r26, 0x08	; 8
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a8 e0       	ldi	r26, 0x08	; 8
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 34       	cpi	r26, 0x4D	; 77
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 91 05 	call	0xb22	; 0xb22 <main>
 122:	0c 94 90 07 	jmp	0xf20	; 0xf20 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <calculate_pid>:
	}
}


void calculate_pid()
{
 12a:	4f 92       	push	r4
 12c:	5f 92       	push	r5
 12e:	6f 92       	push	r6
 130:	7f 92       	push	r7
 132:	8f 92       	push	r8
 134:	9f 92       	push	r9
 136:	af 92       	push	r10
 138:	bf 92       	push	r11
 13a:	cf 92       	push	r12
 13c:	df 92       	push	r13
 13e:	ef 92       	push	r14
 140:	ff 92       	push	r15
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
	P = error;
 14a:	c0 90 20 02 	lds	r12, 0x0220
 14e:	d0 90 21 02 	lds	r13, 0x0221
 152:	e0 90 22 02 	lds	r14, 0x0222
 156:	f0 90 23 02 	lds	r15, 0x0223
 15a:	c0 92 1c 02 	sts	0x021C, r12
 15e:	d0 92 1d 02 	sts	0x021D, r13
 162:	e0 92 1e 02 	sts	0x021E, r14
 166:	f0 92 1f 02 	sts	0x021F, r15
	I = I + error;
 16a:	c7 01       	movw	r24, r14
 16c:	b6 01       	movw	r22, r12
 16e:	20 91 18 02 	lds	r18, 0x0218
 172:	30 91 19 02 	lds	r19, 0x0219
 176:	40 91 1a 02 	lds	r20, 0x021A
 17a:	50 91 1b 02 	lds	r21, 0x021B
 17e:	0e 94 bb 05 	call	0xb76	; 0xb76 <__addsf3>
 182:	d6 2f       	mov	r29, r22
 184:	c7 2f       	mov	r28, r23
 186:	18 2f       	mov	r17, r24
 188:	09 2f       	mov	r16, r25
 18a:	86 2f       	mov	r24, r22
 18c:	9c 2f       	mov	r25, r28
 18e:	a1 2f       	mov	r26, r17
 190:	b0 2f       	mov	r27, r16
 192:	80 93 18 02 	sts	0x0218, r24
 196:	90 93 19 02 	sts	0x0219, r25
 19a:	a0 93 1a 02 	sts	0x021A, r26
 19e:	b0 93 1b 02 	sts	0x021B, r27
	D = error - previous_error;
 1a2:	c7 01       	movw	r24, r14
 1a4:	b6 01       	movw	r22, r12
 1a6:	20 91 0c 02 	lds	r18, 0x020C
 1aa:	30 91 0d 02 	lds	r19, 0x020D
 1ae:	40 91 0e 02 	lds	r20, 0x020E
 1b2:	50 91 0f 02 	lds	r21, 0x020F
 1b6:	0e 94 ba 05 	call	0xb74	; 0xb74 <__subsf3>
 1ba:	b6 2e       	mov	r11, r22
 1bc:	a7 2e       	mov	r10, r23
 1be:	98 2e       	mov	r9, r24
 1c0:	89 2e       	mov	r8, r25
 1c2:	86 2f       	mov	r24, r22
 1c4:	9a 2d       	mov	r25, r10
 1c6:	a9 2d       	mov	r26, r9
 1c8:	b8 2d       	mov	r27, r8
 1ca:	80 93 14 02 	sts	0x0214, r24
 1ce:	90 93 15 02 	sts	0x0215, r25
 1d2:	a0 93 16 02 	sts	0x0216, r26
 1d6:	b0 93 17 02 	sts	0x0217, r27
	PID_value = (Kp*P) + (Ki*I) + (Kd*D);
 1da:	c7 01       	movw	r24, r14
 1dc:	b6 01       	movw	r22, r12
 1de:	20 91 04 02 	lds	r18, 0x0204
 1e2:	30 91 05 02 	lds	r19, 0x0205
 1e6:	40 91 06 02 	lds	r20, 0x0206
 1ea:	50 91 07 02 	lds	r21, 0x0207
 1ee:	0e 94 06 07 	call	0xe0c	; 0xe0c <__mulsf3>
 1f2:	2b 01       	movw	r4, r22
 1f4:	3c 01       	movw	r6, r24
 1f6:	8d 2f       	mov	r24, r29
 1f8:	9c 2f       	mov	r25, r28
 1fa:	a1 2f       	mov	r26, r17
 1fc:	b0 2f       	mov	r27, r16
 1fe:	bc 01       	movw	r22, r24
 200:	cd 01       	movw	r24, r26
 202:	20 91 28 02 	lds	r18, 0x0228
 206:	30 91 29 02 	lds	r19, 0x0229
 20a:	40 91 2a 02 	lds	r20, 0x022A
 20e:	50 91 2b 02 	lds	r21, 0x022B
 212:	0e 94 06 07 	call	0xe0c	; 0xe0c <__mulsf3>
 216:	9b 01       	movw	r18, r22
 218:	ac 01       	movw	r20, r24
 21a:	c3 01       	movw	r24, r6
 21c:	b2 01       	movw	r22, r4
 21e:	0e 94 bb 05 	call	0xb76	; 0xb76 <__addsf3>
 222:	2b 01       	movw	r4, r22
 224:	3c 01       	movw	r6, r24
 226:	8b 2d       	mov	r24, r11
 228:	9a 2d       	mov	r25, r10
 22a:	a9 2d       	mov	r26, r9
 22c:	b8 2d       	mov	r27, r8
 22e:	bc 01       	movw	r22, r24
 230:	cd 01       	movw	r24, r26
 232:	20 91 24 02 	lds	r18, 0x0224
 236:	30 91 25 02 	lds	r19, 0x0225
 23a:	40 91 26 02 	lds	r20, 0x0226
 23e:	50 91 27 02 	lds	r21, 0x0227
 242:	0e 94 06 07 	call	0xe0c	; 0xe0c <__mulsf3>
 246:	9b 01       	movw	r18, r22
 248:	ac 01       	movw	r20, r24
 24a:	c3 01       	movw	r24, r6
 24c:	b2 01       	movw	r22, r4
 24e:	0e 94 bb 05 	call	0xb76	; 0xb76 <__addsf3>
 252:	dc 01       	movw	r26, r24
 254:	cb 01       	movw	r24, r22
 256:	80 93 10 02 	sts	0x0210, r24
 25a:	90 93 11 02 	sts	0x0211, r25
 25e:	a0 93 12 02 	sts	0x0212, r26
 262:	b0 93 13 02 	sts	0x0213, r27
	previous_error=error;
 266:	c0 92 0c 02 	sts	0x020C, r12
 26a:	d0 92 0d 02 	sts	0x020D, r13
 26e:	e0 92 0e 02 	sts	0x020E, r14
 272:	f0 92 0f 02 	sts	0x020F, r15
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	ff 90       	pop	r15
 280:	ef 90       	pop	r14
 282:	df 90       	pop	r13
 284:	cf 90       	pop	r12
 286:	bf 90       	pop	r11
 288:	af 90       	pop	r10
 28a:	9f 90       	pop	r9
 28c:	8f 90       	pop	r8
 28e:	7f 90       	pop	r7
 290:	6f 90       	pop	r6
 292:	5f 90       	pop	r5
 294:	4f 90       	pop	r4
 296:	08 95       	ret

00000298 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 298:	86 e6       	ldi	r24, 0x66	; 102
 29a:	9e e0       	ldi	r25, 0x0E	; 14
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_set_4bit+0x4>
 2a0:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 2a2:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 2a4:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
 2a6:	80 e3       	ldi	r24, 0x30	; 48
 2a8:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 2aa:	42 9a       	sbi	0x08, 2	; 8
 2ac:	ef ef       	ldi	r30, 0xFF	; 255
 2ae:	f7 e4       	ldi	r31, 0x47	; 71
 2b0:	31 97       	sbiw	r30, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <lcd_set_4bit+0x18>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <lcd_set_4bit+0x1e>
 2b6:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 2b8:	42 98       	cbi	0x08, 2	; 8
 2ba:	e6 e6       	ldi	r30, 0x66	; 102
 2bc:	fe e0       	ldi	r31, 0x0E	; 14
 2be:	31 97       	sbiw	r30, 0x01	; 1
 2c0:	f1 f7       	brne	.-4      	; 0x2be <lcd_set_4bit+0x26>
 2c2:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 2c4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 2c6:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
 2c8:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 2ca:	42 9a       	sbi	0x08, 2	; 8
 2cc:	ef ef       	ldi	r30, 0xFF	; 255
 2ce:	f7 e4       	ldi	r31, 0x47	; 71
 2d0:	31 97       	sbiw	r30, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <lcd_set_4bit+0x38>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <lcd_set_4bit+0x3e>
 2d6:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 2d8:	42 98       	cbi	0x08, 2	; 8
 2da:	e6 e6       	ldi	r30, 0x66	; 102
 2dc:	fe e0       	ldi	r31, 0x0E	; 14
 2de:	31 97       	sbiw	r30, 0x01	; 1
 2e0:	f1 f7       	brne	.-4      	; 0x2de <lcd_set_4bit+0x46>
 2e2:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 2e4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 2e6:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
 2e8:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 2ea:	42 9a       	sbi	0x08, 2	; 8
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	97 e4       	ldi	r25, 0x47	; 71
 2f0:	01 97       	sbiw	r24, 0x01	; 1
 2f2:	f1 f7       	brne	.-4      	; 0x2f0 <lcd_set_4bit+0x58>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <lcd_set_4bit+0x5e>
 2f6:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 2f8:	42 98       	cbi	0x08, 2	; 8
 2fa:	e6 e6       	ldi	r30, 0x66	; 102
 2fc:	fe e0       	ldi	r31, 0x0E	; 14
 2fe:	31 97       	sbiw	r30, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <lcd_set_4bit+0x66>
 302:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 304:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 306:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
 308:	80 e2       	ldi	r24, 0x20	; 32
 30a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 30c:	42 9a       	sbi	0x08, 2	; 8
 30e:	8f ef       	ldi	r24, 0xFF	; 255
 310:	97 e4       	ldi	r25, 0x47	; 71
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <lcd_set_4bit+0x7a>
 316:	00 c0       	rjmp	.+0      	; 0x318 <lcd_set_4bit+0x80>
 318:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 31a:	42 98       	cbi	0x08, 2	; 8
}
 31c:	08 95       	ret

0000031e <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 31e:	98 b1       	in	r25, 0x08	; 8
 320:	9f 70       	andi	r25, 0x0F	; 15
 322:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 324:	98 b1       	in	r25, 0x08	; 8
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 326:	28 2f       	mov	r18, r24
 328:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 32a:	92 2b       	or	r25, r18
 32c:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 32e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 330:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 332:	42 9a       	sbi	0x08, 2	; 8
 334:	ef ef       	ldi	r30, 0xFF	; 255
 336:	f7 e4       	ldi	r31, 0x47	; 71
 338:	31 97       	sbiw	r30, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <lcd_wr_command+0x1a>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <lcd_wr_command+0x20>
 33e:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 340:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 342:	98 b1       	in	r25, 0x08	; 8
 344:	9f 70       	andi	r25, 0x0F	; 15
 346:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 348:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 34a:	82 95       	swap	r24
 34c:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 34e:	89 2b       	or	r24, r25
 350:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 352:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 354:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 356:	42 9a       	sbi	0x08, 2	; 8
 358:	8f ef       	ldi	r24, 0xFF	; 255
 35a:	97 e4       	ldi	r25, 0x47	; 71
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <lcd_wr_command+0x3e>
 360:	00 c0       	rjmp	.+0      	; 0x362 <lcd_wr_command+0x44>
 362:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 364:	42 98       	cbi	0x08, 2	; 8
}
 366:	08 95       	ret

00000368 <lcd_init>:
 368:	86 e6       	ldi	r24, 0x66	; 102
 36a:	9e e0       	ldi	r25, 0x0E	; 14
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <lcd_init+0x4>
 370:	00 00       	nop
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
 372:	88 e2       	ldi	r24, 0x28	; 40
 374:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_wr_command>
	lcd_wr_command(0x01); //Clear LCD display
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_wr_command>
	lcd_wr_command(0x06); //Auto increment cursor position
 37e:	86 e0       	ldi	r24, 0x06	; 6
 380:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_wr_command>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
 384:	8e e0       	ldi	r24, 0x0E	; 14
 386:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_wr_command>
	lcd_wr_command(0x80); //Set cursor position
 38a:	80 e8       	ldi	r24, 0x80	; 128
 38c:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_wr_command>
}
 390:	08 95       	ret

00000392 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 392:	98 b1       	in	r25, 0x08	; 8
 394:	9f 70       	andi	r25, 0x0F	; 15
 396:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 398:	98 b1       	in	r25, 0x08	; 8
//Function to write data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 39a:	28 2f       	mov	r18, r24
 39c:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 39e:	92 2b       	or	r25, r18
 3a0:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 3a2:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 3a4:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 3a6:	42 9a       	sbi	0x08, 2	; 8
 3a8:	ef ef       	ldi	r30, 0xFF	; 255
 3aa:	f7 e4       	ldi	r31, 0x47	; 71
 3ac:	31 97       	sbiw	r30, 0x01	; 1
 3ae:	f1 f7       	brne	.-4      	; 0x3ac <lcd_wr_char+0x1a>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <lcd_wr_char+0x20>
 3b2:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 3b4:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 3b6:	98 b1       	in	r25, 0x08	; 8
 3b8:	9f 70       	andi	r25, 0x0F	; 15
 3ba:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 3bc:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 3be:	82 95       	swap	r24
 3c0:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 3c2:	89 2b       	or	r24, r25
 3c4:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 3c6:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 3c8:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 3ca:	42 9a       	sbi	0x08, 2	; 8
 3cc:	8f ef       	ldi	r24, 0xFF	; 255
 3ce:	97 e4       	ldi	r25, 0x47	; 71
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	f1 f7       	brne	.-4      	; 0x3d0 <lcd_wr_char+0x3e>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <lcd_wr_char+0x44>
 3d6:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 3d8:	42 98       	cbi	0x08, 2	; 8
}
 3da:	08 95       	ret

000003dc <lcd_home>:


void lcd_home()
{
	lcd_wr_command(0x80);
 3dc:	80 e8       	ldi	r24, 0x80	; 128
 3de:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_wr_command>
}
 3e2:	08 95       	ret

000003e4 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 3e4:	cf 93       	push	r28
 3e6:	df 93       	push	r29
 3e8:	ec 01       	movw	r28, r24
	while(*str != '\0')
 3ea:	88 81       	ld	r24, Y
 3ec:	88 23       	and	r24, r24
 3ee:	31 f0       	breq	.+12     	; 0x3fc <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
 3f0:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 3f2:	0e 94 c9 01 	call	0x392	; 0x392 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 3f6:	89 91       	ld	r24, Y+
 3f8:	88 23       	and	r24, r24
 3fa:	d9 f7       	brne	.-10     	; 0x3f2 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <lcd_cursor>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
 402:	82 30       	cpi	r24, 0x02	; 2
 404:	79 f0       	breq	.+30     	; 0x424 <lcd_cursor+0x22>
 406:	83 30       	cpi	r24, 0x03	; 3
 408:	18 f4       	brcc	.+6      	; 0x410 <lcd_cursor+0xe>
 40a:	81 30       	cpi	r24, 0x01	; 1
 40c:	c9 f4       	brne	.+50     	; 0x440 <lcd_cursor+0x3e>
 40e:	05 c0       	rjmp	.+10     	; 0x41a <lcd_cursor+0x18>
 410:	83 30       	cpi	r24, 0x03	; 3
 412:	69 f0       	breq	.+26     	; 0x42e <lcd_cursor+0x2c>
 414:	84 30       	cpi	r24, 0x04	; 4
 416:	a1 f4       	brne	.+40     	; 0x440 <lcd_cursor+0x3e>
 418:	0f c0       	rjmp	.+30     	; 0x438 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 41a:	86 2f       	mov	r24, r22
 41c:	81 58       	subi	r24, 0x81	; 129
 41e:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_wr_command>
 422:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 424:	86 2f       	mov	r24, r22
 426:	81 54       	subi	r24, 0x41	; 65
 428:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_wr_command>
 42c:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 42e:	86 2f       	mov	r24, r22
 430:	8d 56       	subi	r24, 0x6D	; 109
 432:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_wr_command>
 436:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 438:	86 2f       	mov	r24, r22
 43a:	8d 52       	subi	r24, 0x2D	; 45
 43c:	0e 94 8f 01 	call	0x31e	; 0x31e <lcd_wr_command>
 440:	08 95       	ret

00000442 <lcd_print>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 442:	0f 93       	push	r16
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	8a 01       	movw	r16, r20
 44c:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 44e:	88 23       	and	r24, r24
 450:	11 f0       	breq	.+4      	; 0x456 <lcd_print+0x14>
 452:	66 23       	and	r22, r22
 454:	19 f4       	brne	.+6      	; 0x45c <lcd_print+0x1a>
	{
		lcd_home();
 456:	0e 94 ee 01 	call	0x3dc	; 0x3dc <lcd_home>
 45a:	02 c0       	rjmp	.+4      	; 0x460 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 45c:	0e 94 01 02 	call	0x402	; 0x402 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 460:	c5 30       	cpi	r28, 0x05	; 5
 462:	d1 05       	cpc	r29, r1
 464:	71 f4       	brne	.+28     	; 0x482 <lcd_print+0x40>
	{
		million=value/10000+48;
 466:	c8 01       	movw	r24, r16
 468:	60 e1       	ldi	r22, 0x10	; 16
 46a:	77 e2       	ldi	r23, 0x27	; 39
 46c:	0e 94 69 07 	call	0xed2	; 0xed2 <__udivmodhi4>
 470:	cb 01       	movw	r24, r22
 472:	c0 96       	adiw	r24, 0x30	; 48
 474:	90 93 39 02 	sts	0x0239, r25
 478:	80 93 38 02 	sts	0x0238, r24
		lcd_wr_char(million);
 47c:	0e 94 c9 01 	call	0x392	; 0x392 <lcd_wr_char>
 480:	03 c0       	rjmp	.+6      	; 0x488 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 482:	c4 30       	cpi	r28, 0x04	; 4
 484:	d1 05       	cpc	r29, r1
 486:	b9 f4       	brne	.+46     	; 0x4b6 <lcd_print+0x74>
	{
		temp = value/1000;
 488:	c8 01       	movw	r24, r16
 48a:	68 ee       	ldi	r22, 0xE8	; 232
 48c:	73 e0       	ldi	r23, 0x03	; 3
 48e:	0e 94 69 07 	call	0xed2	; 0xed2 <__udivmodhi4>
 492:	cb 01       	movw	r24, r22
 494:	70 93 3b 02 	sts	0x023B, r23
 498:	60 93 3a 02 	sts	0x023A, r22
		thousand = temp%10 + 48;
 49c:	6a e0       	ldi	r22, 0x0A	; 10
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	0e 94 69 07 	call	0xed2	; 0xed2 <__udivmodhi4>
 4a4:	c0 96       	adiw	r24, 0x30	; 48
 4a6:	90 93 4c 02 	sts	0x024C, r25
 4aa:	80 93 4b 02 	sts	0x024B, r24
		lcd_wr_char(thousand);
 4ae:	0e 94 c9 01 	call	0x392	; 0x392 <lcd_wr_char>
		flag=1;
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	01 c0       	rjmp	.+2      	; 0x4b8 <lcd_print+0x76>
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 4b6:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 4b8:	c3 30       	cpi	r28, 0x03	; 3
 4ba:	d1 05       	cpc	r29, r1
 4bc:	11 f0       	breq	.+4      	; 0x4c2 <lcd_print+0x80>
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	b1 f4       	brne	.+44     	; 0x4ee <lcd_print+0xac>
	{
		temp = value/100;
 4c2:	c8 01       	movw	r24, r16
 4c4:	64 e6       	ldi	r22, 0x64	; 100
 4c6:	70 e0       	ldi	r23, 0x00	; 0
 4c8:	0e 94 69 07 	call	0xed2	; 0xed2 <__udivmodhi4>
 4cc:	cb 01       	movw	r24, r22
 4ce:	70 93 3b 02 	sts	0x023B, r23
 4d2:	60 93 3a 02 	sts	0x023A, r22
		hundred = temp%10 + 48;
 4d6:	6a e0       	ldi	r22, 0x0A	; 10
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	0e 94 69 07 	call	0xed2	; 0xed2 <__udivmodhi4>
 4de:	c0 96       	adiw	r24, 0x30	; 48
 4e0:	90 93 42 02 	sts	0x0242, r25
 4e4:	80 93 41 02 	sts	0x0241, r24
		lcd_wr_char(hundred);
 4e8:	0e 94 c9 01 	call	0x392	; 0x392 <lcd_wr_char>
		flag=1;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 4ee:	c2 30       	cpi	r28, 0x02	; 2
 4f0:	d1 05       	cpc	r29, r1
 4f2:	11 f0       	breq	.+4      	; 0x4f8 <lcd_print+0xb6>
 4f4:	81 30       	cpi	r24, 0x01	; 1
 4f6:	b1 f4       	brne	.+44     	; 0x524 <lcd_print+0xe2>
	{
		temp = value/10;
 4f8:	2a e0       	ldi	r18, 0x0A	; 10
 4fa:	30 e0       	ldi	r19, 0x00	; 0
 4fc:	c8 01       	movw	r24, r16
 4fe:	b9 01       	movw	r22, r18
 500:	0e 94 69 07 	call	0xed2	; 0xed2 <__udivmodhi4>
 504:	cb 01       	movw	r24, r22
 506:	70 93 3b 02 	sts	0x023B, r23
 50a:	60 93 3a 02 	sts	0x023A, r22
		tens = temp%10 + 48;
 50e:	b9 01       	movw	r22, r18
 510:	0e 94 69 07 	call	0xed2	; 0xed2 <__udivmodhi4>
 514:	c0 96       	adiw	r24, 0x30	; 48
 516:	90 93 40 02 	sts	0x0240, r25
 51a:	80 93 3f 02 	sts	0x023F, r24
		lcd_wr_char(tens);
 51e:	0e 94 c9 01 	call	0x392	; 0x392 <lcd_wr_char>
		flag=1;
 522:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 524:	c1 30       	cpi	r28, 0x01	; 1
 526:	d1 05       	cpc	r29, r1
 528:	11 f0       	breq	.+4      	; 0x52e <lcd_print+0xec>
 52a:	81 30       	cpi	r24, 0x01	; 1
 52c:	61 f4       	brne	.+24     	; 0x546 <lcd_print+0x104>
	{
		unit = value%10 + 48;
 52e:	c8 01       	movw	r24, r16
 530:	6a e0       	ldi	r22, 0x0A	; 10
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	0e 94 69 07 	call	0xed2	; 0xed2 <__udivmodhi4>
 538:	c0 96       	adiw	r24, 0x30	; 48
 53a:	90 93 4a 02 	sts	0x024A, r25
 53e:	80 93 49 02 	sts	0x0249, r24
		lcd_wr_char(unit);
 542:	0e 94 c9 01 	call	0x392	; 0x392 <lcd_wr_char>
	}
	if(digits>5)
 546:	c6 30       	cpi	r28, 0x06	; 6
 548:	d1 05       	cpc	r29, r1
 54a:	1c f0       	brlt	.+6      	; 0x552 <lcd_print+0x110>
	{
		lcd_wr_char('E');
 54c:	85 e4       	ldi	r24, 0x45	; 69
 54e:	0e 94 c9 01 	call	0x392	; 0x392 <lcd_wr_char>
	}
}
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	1f 91       	pop	r17
 558:	0f 91       	pop	r16
 55a:	08 95       	ret

0000055c <left_encoder_pin_config>:


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
 55c:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
 55e:	74 9a       	sbi	0x0e, 4	; 14
}
 560:	08 95       	ret

00000562 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
 562:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
 564:	75 9a       	sbi	0x0e, 5	; 14
}
 566:	08 95       	ret

00000568 <lcd_port_config>:


//Function to configure LCD port
void lcd_port_config (void)
{
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
 568:	87 b1       	in	r24, 0x07	; 7
 56a:	87 6f       	ori	r24, 0xF7	; 247
 56c:	87 b9       	out	0x07, r24	; 7
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
 56e:	88 b1       	in	r24, 0x08	; 8
 570:	80 78       	andi	r24, 0x80	; 128
 572:	88 b9       	out	0x08, r24	; 8
}
 574:	08 95       	ret

00000576 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 DDRF = 0x00; 
 576:	10 ba       	out	0x10, r1	; 16
 PORTF = 0x00;
 578:	11 ba       	out	0x11, r1	; 17
 DDRK = 0x00;
 57a:	10 92 07 01 	sts	0x0107, r1
 PORTK = 0x00;
 57e:	10 92 08 01 	sts	0x0108, r1
}
 582:	08 95       	ret

00000584 <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
 584:	81 b1       	in	r24, 0x01	; 1
 586:	8f 60       	ori	r24, 0x0F	; 15
 588:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
 58a:	82 b1       	in	r24, 0x02	; 2
 58c:	80 7f       	andi	r24, 0xF0	; 240
 58e:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 590:	ea e0       	ldi	r30, 0x0A	; 10
 592:	f1 e0       	ldi	r31, 0x01	; 1
 594:	80 81       	ld	r24, Z
 596:	88 61       	ori	r24, 0x18	; 24
 598:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 59a:	eb e0       	ldi	r30, 0x0B	; 11
 59c:	f1 e0       	ldi	r31, 0x01	; 1
 59e:	80 81       	ld	r24, Z
 5a0:	88 61       	ori	r24, 0x18	; 24
 5a2:	80 83       	st	Z, r24
}
 5a4:	08 95       	ret

000005a6 <uart0_init>:

//Function to Initialize PORTS
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
 5a6:	e1 ec       	ldi	r30, 0xC1	; 193
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	10 82       	st	Z, r1
	UCSR0A = 0x00;
 5ac:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
 5b0:	86 e0       	ldi	r24, 0x06	; 6
 5b2:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = 0x5F; //set baud rate lo
 5b6:	8f e5       	ldi	r24, 0x5F	; 95
 5b8:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00; //set baud rate hi
 5bc:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
 5c0:	88 e9       	ldi	r24, 0x98	; 152
 5c2:	80 83       	st	Z, r24
}
 5c4:	08 95       	ret

000005c6 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
 5c6:	e1 e2       	ldi	r30, 0x21	; 33
 5c8:	f1 e0       	ldi	r31, 0x01	; 1
 5ca:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
 5cc:	8f ef       	ldi	r24, 0xFF	; 255
 5ce:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
 5d2:	91 e0       	ldi	r25, 0x01	; 1
 5d4:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
 5d8:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
 5dc:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
 5e0:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
 5e4:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
 5e8:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
 5ec:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 5f0:	89 ea       	ldi	r24, 0xA9	; 169
 5f2:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
 5f6:	8b e0       	ldi	r24, 0x0B	; 11
 5f8:	80 83       	st	Z, r24
}
 5fa:	08 95       	ret

000005fc <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
 5fc:	ea e7       	ldi	r30, 0x7A	; 122
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
 602:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 606:	80 e2       	ldi	r24, 0x20	; 32
 608:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
 60c:	80 e8       	ldi	r24, 0x80	; 128
 60e:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 610:	86 e8       	ldi	r24, 0x86	; 134
 612:	80 83       	st	Z, r24
}
 614:	08 95       	ret

00000616 <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
 616:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
 618:	ea e6       	ldi	r30, 0x6A	; 106
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	80 81       	ld	r24, Z
 61e:	82 60       	ori	r24, 0x02	; 2
 620:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
 622:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
 624:	78 94       	sei
}
 626:	08 95       	ret

00000628 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
 628:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
 62a:	ea e6       	ldi	r30, 0x6A	; 106
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	80 81       	ld	r24, Z
 630:	88 60       	ori	r24, 0x08	; 8
 632:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
 634:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
 636:	78 94       	sei
}
 638:	08 95       	ret

0000063a <send>:

void send ( int n) //send function to send data through UART by parsing the data
{
	int z = 0;
	int c = n;
	a[0] = 0;
 63a:	10 92 43 02 	sts	0x0243, r1
	a[1] = 0;
 63e:	10 92 44 02 	sts	0x0244, r1
	a[2] = 0;
 642:	10 92 45 02 	sts	0x0245, r1
	a[3] = 0;
 646:	10 92 46 02 	sts	0x0246, r1
	a[4] = 0;
 64a:	10 92 47 02 	sts	0x0247, r1
	a[5] = 0;
 64e:	10 92 48 02 	sts	0x0248, r1
	
	while (c)
 652:	00 97       	sbiw	r24, 0x00	; 0
 654:	61 f0       	breq	.+24     	; 0x66e <send+0x34>
 656:	e3 e4       	ldi	r30, 0x43	; 67
 658:	f2 e0       	ldi	r31, 0x02	; 2
	{ // loop till there's nothing left
		a[z++] = (char)(c % 10); // assign the last digit
 65a:	2a e0       	ldi	r18, 0x0A	; 10
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	b9 01       	movw	r22, r18
 660:	0e 94 7d 07 	call	0xefa	; 0xefa <__divmodhi4>
 664:	81 93       	st	Z+, r24
		c /= 10; // "right shift" the number
 666:	86 2f       	mov	r24, r22
 668:	97 2f       	mov	r25, r23
	a[2] = 0;
	a[3] = 0;
	a[4] = 0;
	a[5] = 0;
	
	while (c)
 66a:	00 97       	sbiw	r24, 0x00	; 0
 66c:	c1 f7       	brne	.-16     	; 0x65e <send+0x24>
		a[z++] = (char)(c % 10); // assign the last digit
		c /= 10; // "right shift" the number
	}
	
	
	UDR0 = a[5] + 48;
 66e:	80 91 48 02 	lds	r24, 0x0248
 672:	80 5d       	subi	r24, 0xD0	; 208
 674:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<UDRE0)))
 678:	e0 ec       	ldi	r30, 0xC0	; 192
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 81       	ld	r24, Z
 67e:	85 ff       	sbrs	r24, 5
 680:	fd cf       	rjmp	.-6      	; 0x67c <send+0x42>
	{
		//Do nothing
	}
	UDR0 = a[4] + 48;
 682:	80 91 47 02 	lds	r24, 0x0247
 686:	80 5d       	subi	r24, 0xD0	; 208
 688:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<UDRE0)))
 68c:	e0 ec       	ldi	r30, 0xC0	; 192
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	80 81       	ld	r24, Z
 692:	85 ff       	sbrs	r24, 5
 694:	fd cf       	rjmp	.-6      	; 0x690 <send+0x56>
	{
		//Do nothing
	}
	UDR0 = a[3] + 48;
 696:	80 91 46 02 	lds	r24, 0x0246
 69a:	80 5d       	subi	r24, 0xD0	; 208
 69c:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<UDRE0)))
 6a0:	e0 ec       	ldi	r30, 0xC0	; 192
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	85 ff       	sbrs	r24, 5
 6a8:	fd cf       	rjmp	.-6      	; 0x6a4 <send+0x6a>
	{
		//Do nothing
	}
	UDR0 = a[2] + 48;
 6aa:	80 91 45 02 	lds	r24, 0x0245
 6ae:	80 5d       	subi	r24, 0xD0	; 208
 6b0:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<UDRE0)))
 6b4:	e0 ec       	ldi	r30, 0xC0	; 192
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	80 81       	ld	r24, Z
 6ba:	85 ff       	sbrs	r24, 5
 6bc:	fd cf       	rjmp	.-6      	; 0x6b8 <send+0x7e>
	{
		//Do nothing
	}
	UDR0 = a[1] + 48;
 6be:	80 91 44 02 	lds	r24, 0x0244
 6c2:	80 5d       	subi	r24, 0xD0	; 208
 6c4:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<UDRE0)))
 6c8:	e0 ec       	ldi	r30, 0xC0	; 192
 6ca:	f0 e0       	ldi	r31, 0x00	; 0
 6cc:	80 81       	ld	r24, Z
 6ce:	85 ff       	sbrs	r24, 5
 6d0:	fd cf       	rjmp	.-6      	; 0x6cc <send+0x92>
	{
		//Do nothing
	}
	UDR0 = 46; //dot
 6d2:	8e e2       	ldi	r24, 0x2E	; 46
 6d4:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<UDRE0)))
 6d8:	e0 ec       	ldi	r30, 0xC0	; 192
 6da:	f0 e0       	ldi	r31, 0x00	; 0
 6dc:	80 81       	ld	r24, Z
 6de:	85 ff       	sbrs	r24, 5
 6e0:	fd cf       	rjmp	.-6      	; 0x6dc <send+0xa2>
	{
		//Do nothing
	}
	UDR0 = a[0] + 48;
 6e2:	80 91 43 02 	lds	r24, 0x0243
 6e6:	80 5d       	subi	r24, 0xD0	; 208
 6e8:	80 93 c6 00 	sts	0x00C6, r24
	while(!(UCSR0A & (1<<UDRE0)))
 6ec:	e0 ec       	ldi	r30, 0xC0	; 192
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	80 81       	ld	r24, Z
 6f2:	85 ff       	sbrs	r24, 5
 6f4:	fd cf       	rjmp	.-6      	; 0x6f0 <send+0xb6>
	{
		//Do nothing
	}
	
	
}
 6f6:	08 95       	ret

000006f8 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
	unsigned char a;
	if(Ch>7)
 6f8:	88 30       	cpi	r24, 0x08	; 8
 6fa:	18 f0       	brcs	.+6      	; 0x702 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
 6fc:	98 e0       	ldi	r25, 0x08	; 8
 6fe:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;  			
 702:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;	   		
 704:	80 62       	ori	r24, 0x20	; 32
 706:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
 70a:	ea e7       	ldi	r30, 0x7A	; 122
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	80 81       	ld	r24, Z
 710:	80 64       	ori	r24, 0x40	; 64
 712:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
 714:	80 81       	ld	r24, Z
 716:	84 ff       	sbrs	r24, 4
 718:	fd cf       	rjmp	.-6      	; 0x714 <ADC_Conversion+0x1c>
	a=ADCH;
 71a:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 71e:	ea e7       	ldi	r30, 0x7A	; 122
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	90 81       	ld	r25, Z
 724:	90 61       	ori	r25, 0x10	; 16
 726:	90 83       	st	Z, r25
	ADCSRB = 0x00;
 728:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
 72c:	08 95       	ret

0000072e <white_line>:
	
}

void white_line()
{
	Left_white_line = ADC_Conversion(3);
 72e:	83 e0       	ldi	r24, 0x03	; 3
 730:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <ADC_Conversion>
 734:	80 93 2e 02 	sts	0x022E, r24
	Center_white_line = ADC_Conversion(2);
 738:	82 e0       	ldi	r24, 0x02	; 2
 73a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <ADC_Conversion>
 73e:	80 93 2d 02 	sts	0x022D, r24
	Right_white_line = ADC_Conversion(1);
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <ADC_Conversion>
 748:	80 93 2c 02 	sts	0x022C, r24
	if(Left_white_line>15 && Center_white_line>15 && Right_white_line<=15)
 74c:	90 91 2e 02 	lds	r25, 0x022E
 750:	90 31       	cpi	r25, 0x10	; 16
 752:	a0 f1       	brcs	.+104    	; 0x7bc <white_line+0x8e>
 754:	20 91 2d 02 	lds	r18, 0x022D
 758:	20 31       	cpi	r18, 0x10	; 16
 75a:	78 f0       	brcs	.+30     	; 0x77a <white_line+0x4c>
 75c:	80 31       	cpi	r24, 0x10	; 16
 75e:	68 f4       	brcc	.+26     	; 0x77a <white_line+0x4c>
	{
		error=0.5;
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	a0 e0       	ldi	r26, 0x00	; 0
 766:	bf e3       	ldi	r27, 0x3F	; 63
 768:	80 93 20 02 	sts	0x0220, r24
 76c:	90 93 21 02 	sts	0x0221, r25
 770:	a0 93 22 02 	sts	0x0222, r26
 774:	b0 93 23 02 	sts	0x0223, r27
 778:	08 95       	ret
	}
	else if(Left_white_line>15 && Center_white_line<15 && Right_white_line<=15)
 77a:	2f 30       	cpi	r18, 0x0F	; 15
 77c:	78 f4       	brcc	.+30     	; 0x79c <white_line+0x6e>
 77e:	80 31       	cpi	r24, 0x10	; 16
 780:	68 f4       	brcc	.+26     	; 0x79c <white_line+0x6e>
	{
		error=0.2;
 782:	8d ec       	ldi	r24, 0xCD	; 205
 784:	9c ec       	ldi	r25, 0xCC	; 204
 786:	ac e4       	ldi	r26, 0x4C	; 76
 788:	be e3       	ldi	r27, 0x3E	; 62
 78a:	80 93 20 02 	sts	0x0220, r24
 78e:	90 93 21 02 	sts	0x0221, r25
 792:	a0 93 22 02 	sts	0x0222, r26
 796:	b0 93 23 02 	sts	0x0223, r27
 79a:	08 95       	ret
	}
	else if(Left_white_line>15 && Center_white_line<=15 && Right_white_line>15)
 79c:	20 31       	cpi	r18, 0x10	; 16
 79e:	f0 f5       	brcc	.+124    	; 0x81c <white_line+0xee>
 7a0:	80 31       	cpi	r24, 0x10	; 16
 7a2:	e0 f1       	brcs	.+120    	; 0x81c <white_line+0xee>
	{
		error=0;
 7a4:	80 e0       	ldi	r24, 0x00	; 0
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	dc 01       	movw	r26, r24
 7aa:	80 93 20 02 	sts	0x0220, r24
 7ae:	90 93 21 02 	sts	0x0221, r25
 7b2:	a0 93 22 02 	sts	0x0222, r26
 7b6:	b0 93 23 02 	sts	0x0223, r27
 7ba:	08 95       	ret
	}
	else if(Left_white_line<=15 && Center_white_line<=15 && Right_white_line<=15)
 7bc:	20 91 2d 02 	lds	r18, 0x022D
 7c0:	20 31       	cpi	r18, 0x10	; 16
 7c2:	78 f4       	brcc	.+30     	; 0x7e2 <white_line+0xb4>
 7c4:	80 31       	cpi	r24, 0x10	; 16
 7c6:	08 f0       	brcs	.+2      	; 0x7ca <white_line+0x9c>
 7c8:	5a c0       	rjmp	.+180    	; 0x87e <white_line+0x150>
	{
		error=0;
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	90 e0       	ldi	r25, 0x00	; 0
 7ce:	dc 01       	movw	r26, r24
 7d0:	80 93 20 02 	sts	0x0220, r24
 7d4:	90 93 21 02 	sts	0x0221, r25
 7d8:	a0 93 22 02 	sts	0x0222, r26
 7dc:	b0 93 23 02 	sts	0x0223, r27
 7e0:	08 95       	ret
	}
	else if(Left_white_line<=15 && Center_white_line<=15 && Right_white_line>15)
	{
		error=-0.2;
	}
	else if(Left_white_line<=15 && Center_white_line>15 && Right_white_line>15)
 7e2:	80 31       	cpi	r24, 0x10	; 16
 7e4:	d8 f0       	brcs	.+54     	; 0x81c <white_line+0xee>
 7e6:	0d c0       	rjmp	.+26     	; 0x802 <white_line+0xd4>
	{
		error=0;
	}
	else if(Left_white_line<=15 && Center_white_line<=15 && Right_white_line>15)
	{
		error=-0.2;
 7e8:	8d ec       	ldi	r24, 0xCD	; 205
 7ea:	9c ec       	ldi	r25, 0xCC	; 204
 7ec:	ac e4       	ldi	r26, 0x4C	; 76
 7ee:	be eb       	ldi	r27, 0xBE	; 190
 7f0:	80 93 20 02 	sts	0x0220, r24
 7f4:	90 93 21 02 	sts	0x0221, r25
 7f8:	a0 93 22 02 	sts	0x0222, r26
 7fc:	b0 93 23 02 	sts	0x0223, r27
 800:	08 95       	ret
	}
	else if(Left_white_line<=15 && Center_white_line>15 && Right_white_line>15)
	{
		error=-0.5;
 802:	80 e0       	ldi	r24, 0x00	; 0
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	a0 e0       	ldi	r26, 0x00	; 0
 808:	bf eb       	ldi	r27, 0xBF	; 191
 80a:	80 93 20 02 	sts	0x0220, r24
 80e:	90 93 21 02 	sts	0x0221, r25
 812:	a0 93 22 02 	sts	0x0222, r26
 816:	b0 93 23 02 	sts	0x0223, r27
 81a:	08 95       	ret
	}
	else if(Left_white_line>=15 && Center_white_line>=15 && Right_white_line>=15)
 81c:	9f 30       	cpi	r25, 0x0F	; 15
 81e:	90 f1       	brcs	.+100    	; 0x884 <white_line+0x156>
 820:	90 91 2d 02 	lds	r25, 0x022D
 824:	9f 30       	cpi	r25, 0x0F	; 15
 826:	70 f1       	brcs	.+92     	; 0x884 <white_line+0x156>
 828:	8f 30       	cpi	r24, 0x0F	; 15
 82a:	60 f1       	brcs	.+88     	; 0x884 <white_line+0x156>
	{
		{
			if(error<0)
 82c:	60 91 20 02 	lds	r22, 0x0220
 830:	70 91 21 02 	lds	r23, 0x0221
 834:	80 91 22 02 	lds	r24, 0x0222
 838:	90 91 23 02 	lds	r25, 0x0223
 83c:	20 e0       	ldi	r18, 0x00	; 0
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	a9 01       	movw	r20, r18
 842:	0e 94 1f 06 	call	0xc3e	; 0xc3e <__cmpsf2>
 846:	88 23       	and	r24, r24
 848:	6c f4       	brge	.+26     	; 0x864 <white_line+0x136>
			{
				error=-0.7;
 84a:	83 e3       	ldi	r24, 0x33	; 51
 84c:	93 e3       	ldi	r25, 0x33	; 51
 84e:	a3 e3       	ldi	r26, 0x33	; 51
 850:	bf eb       	ldi	r27, 0xBF	; 191
 852:	80 93 20 02 	sts	0x0220, r24
 856:	90 93 21 02 	sts	0x0221, r25
 85a:	a0 93 22 02 	sts	0x0222, r26
 85e:	b0 93 23 02 	sts	0x0223, r27
 862:	08 95       	ret
			}
			else
			{
				error=0.7;
 864:	83 e3       	ldi	r24, 0x33	; 51
 866:	93 e3       	ldi	r25, 0x33	; 51
 868:	a3 e3       	ldi	r26, 0x33	; 51
 86a:	bf e3       	ldi	r27, 0x3F	; 63
 86c:	80 93 20 02 	sts	0x0220, r24
 870:	90 93 21 02 	sts	0x0221, r25
 874:	a0 93 22 02 	sts	0x0222, r26
 878:	b0 93 23 02 	sts	0x0223, r27
 87c:	08 95       	ret
	}
	else if(Left_white_line<=15 && Center_white_line<=15 && Right_white_line<=15)
	{
		error=0;
	}
	else if(Left_white_line<=15 && Center_white_line<=15 && Right_white_line>15)
 87e:	80 31       	cpi	r24, 0x10	; 16
 880:	68 f2       	brcs	.-102    	; 0x81c <white_line+0xee>
 882:	b2 cf       	rjmp	.-156    	; 0x7e8 <white_line+0xba>
 884:	08 95       	ret

00000886 <__vector_6>:
}


//ISR for right position encoder
ISR(INT5_vect)
{
 886:	1f 92       	push	r1
 888:	0f 92       	push	r0
 88a:	0f b6       	in	r0, 0x3f	; 63
 88c:	0f 92       	push	r0
 88e:	11 24       	eor	r1, r1
 890:	8f 93       	push	r24
 892:	9f 93       	push	r25
 894:	af 93       	push	r26
 896:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
 898:	80 91 30 02 	lds	r24, 0x0230
 89c:	90 91 31 02 	lds	r25, 0x0231
 8a0:	a0 91 32 02 	lds	r26, 0x0232
 8a4:	b0 91 33 02 	lds	r27, 0x0233
 8a8:	01 96       	adiw	r24, 0x01	; 1
 8aa:	a1 1d       	adc	r26, r1
 8ac:	b1 1d       	adc	r27, r1
 8ae:	80 93 30 02 	sts	0x0230, r24
 8b2:	90 93 31 02 	sts	0x0231, r25
 8b6:	a0 93 32 02 	sts	0x0232, r26
 8ba:	b0 93 33 02 	sts	0x0233, r27
}
 8be:	bf 91       	pop	r27
 8c0:	af 91       	pop	r26
 8c2:	9f 91       	pop	r25
 8c4:	8f 91       	pop	r24
 8c6:	0f 90       	pop	r0
 8c8:	0f be       	out	0x3f, r0	; 63
 8ca:	0f 90       	pop	r0
 8cc:	1f 90       	pop	r1
 8ce:	18 95       	reti

000008d0 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
 8d0:	1f 92       	push	r1
 8d2:	0f 92       	push	r0
 8d4:	0f b6       	in	r0, 0x3f	; 63
 8d6:	0f 92       	push	r0
 8d8:	11 24       	eor	r1, r1
 8da:	8f 93       	push	r24
 8dc:	9f 93       	push	r25
 8de:	af 93       	push	r26
 8e0:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
 8e2:	80 91 34 02 	lds	r24, 0x0234
 8e6:	90 91 35 02 	lds	r25, 0x0235
 8ea:	a0 91 36 02 	lds	r26, 0x0236
 8ee:	b0 91 37 02 	lds	r27, 0x0237
 8f2:	01 96       	adiw	r24, 0x01	; 1
 8f4:	a1 1d       	adc	r26, r1
 8f6:	b1 1d       	adc	r27, r1
 8f8:	80 93 34 02 	sts	0x0234, r24
 8fc:	90 93 35 02 	sts	0x0235, r25
 900:	a0 93 36 02 	sts	0x0236, r26
 904:	b0 93 37 02 	sts	0x0237, r27
}
 908:	bf 91       	pop	r27
 90a:	af 91       	pop	r26
 90c:	9f 91       	pop	r25
 90e:	8f 91       	pop	r24
 910:	0f 90       	pop	r0
 912:	0f be       	out	0x3f, r0	; 63
 914:	0f 90       	pop	r0
 916:	1f 90       	pop	r1
 918:	18 95       	reti

0000091a <velocity>:


//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 91a:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 91e:	60 93 2a 01 	sts	0x012A, r22
}
 922:	08 95       	ret

00000924 <control_motor_speed>:
	send(left);
	send(right);
}

void control_motor_speed()
{
 924:	8f 92       	push	r8
 926:	9f 92       	push	r9
 928:	af 92       	push	r10
 92a:	bf 92       	push	r11
 92c:	cf 92       	push	r12
 92e:	df 92       	push	r13
 930:	ef 92       	push	r14
 932:	ff 92       	push	r15
 934:	cf 93       	push	r28
 936:	df 93       	push	r29
	left_motor_speed = initial_motor_speed + PID_value;
 938:	60 91 02 02 	lds	r22, 0x0202
 93c:	70 91 03 02 	lds	r23, 0x0203
 940:	88 27       	eor	r24, r24
 942:	77 fd       	sbrc	r23, 7
 944:	80 95       	com	r24
 946:	98 2f       	mov	r25, r24
 948:	0e 94 56 06 	call	0xcac	; 0xcac <__floatsisf>
 94c:	6b 01       	movw	r12, r22
 94e:	7c 01       	movw	r14, r24
 950:	80 90 10 02 	lds	r8, 0x0210
 954:	90 90 11 02 	lds	r9, 0x0211
 958:	a0 90 12 02 	lds	r10, 0x0212
 95c:	b0 90 13 02 	lds	r11, 0x0213
 960:	a5 01       	movw	r20, r10
 962:	94 01       	movw	r18, r8
 964:	0e 94 bb 05 	call	0xb76	; 0xb76 <__addsf3>
 968:	0e 94 23 06 	call	0xc46	; 0xc46 <__fixsfsi>
 96c:	dc 01       	movw	r26, r24
 96e:	cb 01       	movw	r24, r22
 970:	ec 01       	movw	r28, r24
 972:	90 93 0b 02 	sts	0x020B, r25
 976:	80 93 0a 02 	sts	0x020A, r24
	right_motor_speed = initial_motor_speed - PID_value;
 97a:	c7 01       	movw	r24, r14
 97c:	b6 01       	movw	r22, r12
 97e:	a5 01       	movw	r20, r10
 980:	94 01       	movw	r18, r8
 982:	0e 94 ba 05 	call	0xb74	; 0xb74 <__subsf3>
 986:	0e 94 23 06 	call	0xc46	; 0xc46 <__fixsfsi>
 98a:	ab 01       	movw	r20, r22
 98c:	bc 01       	movw	r22, r24
 98e:	ca 01       	movw	r24, r20
 990:	50 93 09 02 	sts	0x0209, r21
 994:	40 93 08 02 	sts	0x0208, r20
	if(left_motor_speed<=0)
 998:	1c 16       	cp	r1, r28
 99a:	1d 06       	cpc	r1, r29
 99c:	24 f0       	brlt	.+8      	; 0x9a6 <control_motor_speed+0x82>
	{
		left_motor_speed=0;
 99e:	10 92 0b 02 	sts	0x020B, r1
 9a2:	10 92 0a 02 	sts	0x020A, r1
	}
	if (right_motor_speed<=0)
 9a6:	18 16       	cp	r1, r24
 9a8:	19 06       	cpc	r1, r25
 9aa:	24 f0       	brlt	.+8      	; 0x9b4 <control_motor_speed+0x90>
	{
		right_motor_speed=0;
 9ac:	10 92 09 02 	sts	0x0209, r1
 9b0:	10 92 08 02 	sts	0x0208, r1
	}
	if(left_motor_speed>=255)
 9b4:	80 91 0a 02 	lds	r24, 0x020A
 9b8:	90 91 0b 02 	lds	r25, 0x020B
 9bc:	8f 3f       	cpi	r24, 0xFF	; 255
 9be:	91 05       	cpc	r25, r1
 9c0:	34 f0       	brlt	.+12     	; 0x9ce <control_motor_speed+0xaa>
	{
		left_motor_speed=255;
 9c2:	8f ef       	ldi	r24, 0xFF	; 255
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	90 93 0b 02 	sts	0x020B, r25
 9ca:	80 93 0a 02 	sts	0x020A, r24
	}
	if (right_motor_speed>=255)
 9ce:	80 91 08 02 	lds	r24, 0x0208
 9d2:	90 91 09 02 	lds	r25, 0x0209
 9d6:	8f 3f       	cpi	r24, 0xFF	; 255
 9d8:	91 05       	cpc	r25, r1
 9da:	34 f0       	brlt	.+12     	; 0x9e8 <control_motor_speed+0xc4>
	{
		right_motor_speed=255;
 9dc:	8f ef       	ldi	r24, 0xFF	; 255
 9de:	90 e0       	ldi	r25, 0x00	; 0
 9e0:	90 93 09 02 	sts	0x0209, r25
 9e4:	80 93 08 02 	sts	0x0208, r24
	}
	forward();
 9e8:	0e 94 21 05 	call	0xa42	; 0xa42 <forward>
	velocity(left_motor_speed,right_motor_speed);
 9ec:	80 91 0a 02 	lds	r24, 0x020A
 9f0:	60 91 08 02 	lds	r22, 0x0208
 9f4:	0e 94 8d 04 	call	0x91a	; 0x91a <velocity>
	
}
 9f8:	df 91       	pop	r29
 9fa:	cf 91       	pop	r28
 9fc:	ff 90       	pop	r15
 9fe:	ef 90       	pop	r14
 a00:	df 90       	pop	r13
 a02:	cf 90       	pop	r12
 a04:	bf 90       	pop	r11
 a06:	af 90       	pop	r10
 a08:	9f 90       	pop	r9
 a0a:	8f 90       	pop	r8
 a0c:	08 95       	ret

00000a0e <print_sensor>:
	OCR5BL = (unsigned char)right_motor;
}

//Function To Print Sensor Values At Desired Row And Column Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
 a0e:	cf 93       	push	r28
 a10:	df 93       	push	r29
 a12:	d8 2f       	mov	r29, r24
 a14:	c6 2f       	mov	r28, r22
 a16:	84 2f       	mov	r24, r20
	ADC_Value = ADC_Conversion(channel);
 a18:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <ADC_Conversion>
 a1c:	48 2f       	mov	r20, r24
 a1e:	80 93 3c 02 	sts	0x023C, r24
	lcd_print(row, coloumn, ADC_Value, 3);
 a22:	8d 2f       	mov	r24, r29
 a24:	6c 2f       	mov	r22, r28
 a26:	50 e0       	ldi	r21, 0x00	; 0
 a28:	23 e0       	ldi	r18, 0x03	; 3
 a2a:	30 e0       	ldi	r19, 0x00	; 0
 a2c:	0e 94 21 02 	call	0x442	; 0x442 <lcd_print>
}
 a30:	df 91       	pop	r29
 a32:	cf 91       	pop	r28
 a34:	08 95       	ret

00000a36 <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
 a36:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
 a38:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
 a3a:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 		// reading the PORTA original status
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
 a3c:	98 2b       	or	r25, r24
	PORTA = PortARestore; 		// executing the command
 a3e:	92 b9       	out	0x02, r25	; 2
}
 a40:	08 95       	ret

00000a42 <forward>:



void forward (void) 
{
  motion_set (0x06);
 a42:	86 e0       	ldi	r24, 0x06	; 6
 a44:	0e 94 1b 05 	call	0xa36	; 0xa36 <motion_set>
}
 a48:	08 95       	ret

00000a4a <linear_distance_mm>:


linear_distance_mm(ShaftCountRight)
{
	
	float DistanceInMM = ShaftCountRight*5.338;
 a4a:	9c 01       	movw	r18, r24
 a4c:	b9 01       	movw	r22, r18
 a4e:	88 27       	eor	r24, r24
 a50:	77 fd       	sbrc	r23, 7
 a52:	80 95       	com	r24
 a54:	98 2f       	mov	r25, r24
 a56:	0e 94 56 06 	call	0xcac	; 0xcac <__floatsisf>
 a5a:	25 ee       	ldi	r18, 0xE5	; 229
 a5c:	30 ed       	ldi	r19, 0xD0	; 208
 a5e:	4a ea       	ldi	r20, 0xAA	; 170
 a60:	50 e4       	ldi	r21, 0x40	; 64
 a62:	0e 94 06 07 	call	0xe0c	; 0xe0c <__mulsf3>
	return DistanceInMM;
 a66:	0e 94 23 06 	call	0xc46	; 0xc46 <__fixsfsi>
}
 a6a:	86 2f       	mov	r24, r22
 a6c:	97 2f       	mov	r25, r23
 a6e:	08 95       	ret

00000a70 <follow_white_line>:
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
	PORTA = PortARestore; 		// executing the command
}

void follow_white_line() {
 a70:	0f 93       	push	r16
 a72:	1f 93       	push	r17
 a74:	cf 93       	push	r28
 a76:	df 93       	push	r29
	
	white_line();
 a78:	0e 94 97 03 	call	0x72e	; 0x72e <white_line>
	calculate_pid();
 a7c:	0e 94 95 00 	call	0x12a	; 0x12a <calculate_pid>
	control_motor_speed();
 a80:	0e 94 92 04 	call	0x924	; 0x924 <control_motor_speed>
	int a=ShaftCountLeft;
	int b=ShaftCountRight;
	float left=linear_distance_mm(a);
 a84:	80 91 34 02 	lds	r24, 0x0234
 a88:	90 91 35 02 	lds	r25, 0x0235
 a8c:	0e 94 25 05 	call	0xa4a	; 0xa4a <linear_distance_mm>
 a90:	ec 01       	movw	r28, r24
	float right=linear_distance_mm(b);
 a92:	80 91 30 02 	lds	r24, 0x0230
 a96:	90 91 31 02 	lds	r25, 0x0231
 a9a:	0e 94 25 05 	call	0xa4a	; 0xa4a <linear_distance_mm>
 a9e:	8c 01       	movw	r16, r24
	send("D");
 aa0:	80 e0       	ldi	r24, 0x00	; 0
 aa2:	92 e0       	ldi	r25, 0x02	; 2
 aa4:	0e 94 1d 03 	call	0x63a	; 0x63a <send>
	white_line();
	calculate_pid();
	control_motor_speed();
	int a=ShaftCountLeft;
	int b=ShaftCountRight;
	float left=linear_distance_mm(a);
 aa8:	be 01       	movw	r22, r28
 aaa:	88 27       	eor	r24, r24
 aac:	77 fd       	sbrc	r23, 7
 aae:	80 95       	com	r24
 ab0:	98 2f       	mov	r25, r24
 ab2:	0e 94 56 06 	call	0xcac	; 0xcac <__floatsisf>
	float right=linear_distance_mm(b);
	send("D");
	send(left);
 ab6:	0e 94 23 06 	call	0xc46	; 0xc46 <__fixsfsi>
 aba:	dc 01       	movw	r26, r24
 abc:	cb 01       	movw	r24, r22
 abe:	0e 94 1d 03 	call	0x63a	; 0x63a <send>
	calculate_pid();
	control_motor_speed();
	int a=ShaftCountLeft;
	int b=ShaftCountRight;
	float left=linear_distance_mm(a);
	float right=linear_distance_mm(b);
 ac2:	b8 01       	movw	r22, r16
 ac4:	88 27       	eor	r24, r24
 ac6:	77 fd       	sbrc	r23, 7
 ac8:	80 95       	com	r24
 aca:	98 2f       	mov	r25, r24
 acc:	0e 94 56 06 	call	0xcac	; 0xcac <__floatsisf>
	send("D");
	send(left);
	send(right);
 ad0:	0e 94 23 06 	call	0xc46	; 0xc46 <__fixsfsi>
 ad4:	dc 01       	movw	r26, r24
 ad6:	cb 01       	movw	r24, r22
 ad8:	0e 94 1d 03 	call	0x63a	; 0x63a <send>
}
 adc:	df 91       	pop	r29
 ade:	cf 91       	pop	r28
 ae0:	1f 91       	pop	r17
 ae2:	0f 91       	pop	r16
 ae4:	08 95       	ret

00000ae6 <stop>:
  motion_set (0x06);
}

void stop (void)
{
  motion_set (0x00);
 ae6:	80 e0       	ldi	r24, 0x00	; 0
 ae8:	0e 94 1b 05 	call	0xa36	; 0xa36 <motion_set>
}
 aec:	08 95       	ret

00000aee <port_init>:

void port_init()
{
	lcd_port_config();
 aee:	0e 94 b4 02 	call	0x568	; 0x568 <lcd_port_config>
	adc_pin_config();
 af2:	0e 94 bb 02 	call	0x576	; 0x576 <adc_pin_config>
	motion_pin_config();
 af6:	0e 94 c2 02 	call	0x584	; 0x584 <motion_pin_config>
	left_encoder_pin_config(); //left encoder pin config
 afa:	0e 94 ae 02 	call	0x55c	; 0x55c <left_encoder_pin_config>
	right_encoder_pin_config(); //right encoder pin config
 afe:	0e 94 b1 02 	call	0x562	; 0x562 <right_encoder_pin_config>
}
 b02:	08 95       	ret

00000b04 <init_devices>:

void init_devices (void)
{
	cli(); //Clears the global interrupts
 b04:	f8 94       	cli
	port_init();
 b06:	0e 94 77 05 	call	0xaee	; 0xaee <port_init>
	adc_init();
 b0a:	0e 94 fe 02 	call	0x5fc	; 0x5fc <adc_init>
	timer5_init();
 b0e:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <timer5_init>
	left_position_encoder_interrupt_init();
 b12:	0e 94 0b 03 	call	0x616	; 0x616 <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
 b16:	0e 94 14 03 	call	0x628	; 0x628 <right_position_encoder_interrupt_init>
	uart0_init();
 b1a:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <uart0_init>
	sei();   //Enables the global interrupts
 b1e:	78 94       	sei
}
 b20:	08 95       	ret

00000b22 <main>:

//Main Function
int main()
{
	init_devices();
 b22:	0e 94 82 05 	call	0xb04	; 0xb04 <init_devices>
	lcd_set_4bit();
 b26:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_set_4bit>
	lcd_init();
 b2a:	0e 94 b4 01 	call	0x368	; 0x368 <lcd_init>
	
	while(1)
	{

		Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
 b2e:	83 e0       	ldi	r24, 0x03	; 3
 b30:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <ADC_Conversion>
 b34:	80 93 2e 02 	sts	0x022E, r24
		Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
 b38:	82 e0       	ldi	r24, 0x02	; 2
 b3a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <ADC_Conversion>
 b3e:	80 93 2d 02 	sts	0x022D, r24
		Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
 b42:	81 e0       	ldi	r24, 0x01	; 1
 b44:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <ADC_Conversion>
 b48:	80 93 2c 02 	sts	0x022C, r24

		flag=0;
 b4c:	10 92 2f 02 	sts	0x022F, r1

		print_sensor(1,1,3);	//Prints value of White Line Sensor1
 b50:	81 e0       	ldi	r24, 0x01	; 1
 b52:	61 e0       	ldi	r22, 0x01	; 1
 b54:	43 e0       	ldi	r20, 0x03	; 3
 b56:	0e 94 07 05 	call	0xa0e	; 0xa0e <print_sensor>
		print_sensor(1,5,2);	//Prints Value of White Line Sensor2
 b5a:	81 e0       	ldi	r24, 0x01	; 1
 b5c:	65 e0       	ldi	r22, 0x05	; 5
 b5e:	42 e0       	ldi	r20, 0x02	; 2
 b60:	0e 94 07 05 	call	0xa0e	; 0xa0e <print_sensor>
		print_sensor(1,9,1);	//Prints Value of White Line Sensor3
 b64:	81 e0       	ldi	r24, 0x01	; 1
 b66:	69 e0       	ldi	r22, 0x09	; 9
 b68:	41 e0       	ldi	r20, 0x01	; 1
 b6a:	0e 94 07 05 	call	0xa0e	; 0xa0e <print_sensor>
		
		

		follow_white_line();
 b6e:	0e 94 38 05 	call	0xa70	; 0xa70 <follow_white_line>
 b72:	dd cf       	rjmp	.-70     	; 0xb2e <main+0xc>

00000b74 <__subsf3>:
 b74:	50 58       	subi	r21, 0x80	; 128

00000b76 <__addsf3>:
 b76:	bb 27       	eor	r27, r27
 b78:	aa 27       	eor	r26, r26
 b7a:	0e d0       	rcall	.+28     	; 0xb98 <__addsf3x>
 b7c:	0d c1       	rjmp	.+538    	; 0xd98 <__fp_round>
 b7e:	fe d0       	rcall	.+508    	; 0xd7c <__fp_pscA>
 b80:	30 f0       	brcs	.+12     	; 0xb8e <__addsf3+0x18>
 b82:	03 d1       	rcall	.+518    	; 0xd8a <__fp_pscB>
 b84:	20 f0       	brcs	.+8      	; 0xb8e <__addsf3+0x18>
 b86:	31 f4       	brne	.+12     	; 0xb94 <__addsf3+0x1e>
 b88:	9f 3f       	cpi	r25, 0xFF	; 255
 b8a:	11 f4       	brne	.+4      	; 0xb90 <__addsf3+0x1a>
 b8c:	1e f4       	brtc	.+6      	; 0xb94 <__addsf3+0x1e>
 b8e:	f3 c0       	rjmp	.+486    	; 0xd76 <__fp_nan>
 b90:	0e f4       	brtc	.+2      	; 0xb94 <__addsf3+0x1e>
 b92:	e0 95       	com	r30
 b94:	e7 fb       	bst	r30, 7
 b96:	e9 c0       	rjmp	.+466    	; 0xd6a <__fp_inf>

00000b98 <__addsf3x>:
 b98:	e9 2f       	mov	r30, r25
 b9a:	0f d1       	rcall	.+542    	; 0xdba <__fp_split3>
 b9c:	80 f3       	brcs	.-32     	; 0xb7e <__addsf3+0x8>
 b9e:	ba 17       	cp	r27, r26
 ba0:	62 07       	cpc	r22, r18
 ba2:	73 07       	cpc	r23, r19
 ba4:	84 07       	cpc	r24, r20
 ba6:	95 07       	cpc	r25, r21
 ba8:	18 f0       	brcs	.+6      	; 0xbb0 <__addsf3x+0x18>
 baa:	71 f4       	brne	.+28     	; 0xbc8 <__addsf3x+0x30>
 bac:	9e f5       	brtc	.+102    	; 0xc14 <__addsf3x+0x7c>
 bae:	27 c1       	rjmp	.+590    	; 0xdfe <__fp_zero>
 bb0:	0e f4       	brtc	.+2      	; 0xbb4 <__addsf3x+0x1c>
 bb2:	e0 95       	com	r30
 bb4:	0b 2e       	mov	r0, r27
 bb6:	ba 2f       	mov	r27, r26
 bb8:	a0 2d       	mov	r26, r0
 bba:	0b 01       	movw	r0, r22
 bbc:	b9 01       	movw	r22, r18
 bbe:	90 01       	movw	r18, r0
 bc0:	0c 01       	movw	r0, r24
 bc2:	ca 01       	movw	r24, r20
 bc4:	a0 01       	movw	r20, r0
 bc6:	11 24       	eor	r1, r1
 bc8:	ff 27       	eor	r31, r31
 bca:	59 1b       	sub	r21, r25
 bcc:	99 f0       	breq	.+38     	; 0xbf4 <__addsf3x+0x5c>
 bce:	59 3f       	cpi	r21, 0xF9	; 249
 bd0:	50 f4       	brcc	.+20     	; 0xbe6 <__addsf3x+0x4e>
 bd2:	50 3e       	cpi	r21, 0xE0	; 224
 bd4:	68 f1       	brcs	.+90     	; 0xc30 <__addsf3x+0x98>
 bd6:	1a 16       	cp	r1, r26
 bd8:	f0 40       	sbci	r31, 0x00	; 0
 bda:	a2 2f       	mov	r26, r18
 bdc:	23 2f       	mov	r18, r19
 bde:	34 2f       	mov	r19, r20
 be0:	44 27       	eor	r20, r20
 be2:	58 5f       	subi	r21, 0xF8	; 248
 be4:	f3 cf       	rjmp	.-26     	; 0xbcc <__addsf3x+0x34>
 be6:	46 95       	lsr	r20
 be8:	37 95       	ror	r19
 bea:	27 95       	ror	r18
 bec:	a7 95       	ror	r26
 bee:	f0 40       	sbci	r31, 0x00	; 0
 bf0:	53 95       	inc	r21
 bf2:	c9 f7       	brne	.-14     	; 0xbe6 <__addsf3x+0x4e>
 bf4:	7e f4       	brtc	.+30     	; 0xc14 <__addsf3x+0x7c>
 bf6:	1f 16       	cp	r1, r31
 bf8:	ba 0b       	sbc	r27, r26
 bfa:	62 0b       	sbc	r22, r18
 bfc:	73 0b       	sbc	r23, r19
 bfe:	84 0b       	sbc	r24, r20
 c00:	ba f0       	brmi	.+46     	; 0xc30 <__addsf3x+0x98>
 c02:	91 50       	subi	r25, 0x01	; 1
 c04:	a1 f0       	breq	.+40     	; 0xc2e <__addsf3x+0x96>
 c06:	ff 0f       	add	r31, r31
 c08:	bb 1f       	adc	r27, r27
 c0a:	66 1f       	adc	r22, r22
 c0c:	77 1f       	adc	r23, r23
 c0e:	88 1f       	adc	r24, r24
 c10:	c2 f7       	brpl	.-16     	; 0xc02 <__addsf3x+0x6a>
 c12:	0e c0       	rjmp	.+28     	; 0xc30 <__addsf3x+0x98>
 c14:	ba 0f       	add	r27, r26
 c16:	62 1f       	adc	r22, r18
 c18:	73 1f       	adc	r23, r19
 c1a:	84 1f       	adc	r24, r20
 c1c:	48 f4       	brcc	.+18     	; 0xc30 <__addsf3x+0x98>
 c1e:	87 95       	ror	r24
 c20:	77 95       	ror	r23
 c22:	67 95       	ror	r22
 c24:	b7 95       	ror	r27
 c26:	f7 95       	ror	r31
 c28:	9e 3f       	cpi	r25, 0xFE	; 254
 c2a:	08 f0       	brcs	.+2      	; 0xc2e <__addsf3x+0x96>
 c2c:	b3 cf       	rjmp	.-154    	; 0xb94 <__addsf3+0x1e>
 c2e:	93 95       	inc	r25
 c30:	88 0f       	add	r24, r24
 c32:	08 f0       	brcs	.+2      	; 0xc36 <__addsf3x+0x9e>
 c34:	99 27       	eor	r25, r25
 c36:	ee 0f       	add	r30, r30
 c38:	97 95       	ror	r25
 c3a:	87 95       	ror	r24
 c3c:	08 95       	ret

00000c3e <__cmpsf2>:
 c3e:	71 d0       	rcall	.+226    	; 0xd22 <__fp_cmp>
 c40:	08 f4       	brcc	.+2      	; 0xc44 <__cmpsf2+0x6>
 c42:	81 e0       	ldi	r24, 0x01	; 1
 c44:	08 95       	ret

00000c46 <__fixsfsi>:
 c46:	04 d0       	rcall	.+8      	; 0xc50 <__fixunssfsi>
 c48:	68 94       	set
 c4a:	b1 11       	cpse	r27, r1
 c4c:	d9 c0       	rjmp	.+434    	; 0xe00 <__fp_szero>
 c4e:	08 95       	ret

00000c50 <__fixunssfsi>:
 c50:	bc d0       	rcall	.+376    	; 0xdca <__fp_splitA>
 c52:	88 f0       	brcs	.+34     	; 0xc76 <__fixunssfsi+0x26>
 c54:	9f 57       	subi	r25, 0x7F	; 127
 c56:	90 f0       	brcs	.+36     	; 0xc7c <__fixunssfsi+0x2c>
 c58:	b9 2f       	mov	r27, r25
 c5a:	99 27       	eor	r25, r25
 c5c:	b7 51       	subi	r27, 0x17	; 23
 c5e:	a0 f0       	brcs	.+40     	; 0xc88 <__fixunssfsi+0x38>
 c60:	d1 f0       	breq	.+52     	; 0xc96 <__fixunssfsi+0x46>
 c62:	66 0f       	add	r22, r22
 c64:	77 1f       	adc	r23, r23
 c66:	88 1f       	adc	r24, r24
 c68:	99 1f       	adc	r25, r25
 c6a:	1a f0       	brmi	.+6      	; 0xc72 <__fixunssfsi+0x22>
 c6c:	ba 95       	dec	r27
 c6e:	c9 f7       	brne	.-14     	; 0xc62 <__fixunssfsi+0x12>
 c70:	12 c0       	rjmp	.+36     	; 0xc96 <__fixunssfsi+0x46>
 c72:	b1 30       	cpi	r27, 0x01	; 1
 c74:	81 f0       	breq	.+32     	; 0xc96 <__fixunssfsi+0x46>
 c76:	c3 d0       	rcall	.+390    	; 0xdfe <__fp_zero>
 c78:	b1 e0       	ldi	r27, 0x01	; 1
 c7a:	08 95       	ret
 c7c:	c0 c0       	rjmp	.+384    	; 0xdfe <__fp_zero>
 c7e:	67 2f       	mov	r22, r23
 c80:	78 2f       	mov	r23, r24
 c82:	88 27       	eor	r24, r24
 c84:	b8 5f       	subi	r27, 0xF8	; 248
 c86:	39 f0       	breq	.+14     	; 0xc96 <__fixunssfsi+0x46>
 c88:	b9 3f       	cpi	r27, 0xF9	; 249
 c8a:	cc f3       	brlt	.-14     	; 0xc7e <__fixunssfsi+0x2e>
 c8c:	86 95       	lsr	r24
 c8e:	77 95       	ror	r23
 c90:	67 95       	ror	r22
 c92:	b3 95       	inc	r27
 c94:	d9 f7       	brne	.-10     	; 0xc8c <__fixunssfsi+0x3c>
 c96:	3e f4       	brtc	.+14     	; 0xca6 <__fixunssfsi+0x56>
 c98:	90 95       	com	r25
 c9a:	80 95       	com	r24
 c9c:	70 95       	com	r23
 c9e:	61 95       	neg	r22
 ca0:	7f 4f       	sbci	r23, 0xFF	; 255
 ca2:	8f 4f       	sbci	r24, 0xFF	; 255
 ca4:	9f 4f       	sbci	r25, 0xFF	; 255
 ca6:	08 95       	ret

00000ca8 <__floatunsisf>:
 ca8:	e8 94       	clt
 caa:	09 c0       	rjmp	.+18     	; 0xcbe <__floatsisf+0x12>

00000cac <__floatsisf>:
 cac:	97 fb       	bst	r25, 7
 cae:	3e f4       	brtc	.+14     	; 0xcbe <__floatsisf+0x12>
 cb0:	90 95       	com	r25
 cb2:	80 95       	com	r24
 cb4:	70 95       	com	r23
 cb6:	61 95       	neg	r22
 cb8:	7f 4f       	sbci	r23, 0xFF	; 255
 cba:	8f 4f       	sbci	r24, 0xFF	; 255
 cbc:	9f 4f       	sbci	r25, 0xFF	; 255
 cbe:	99 23       	and	r25, r25
 cc0:	a9 f0       	breq	.+42     	; 0xcec <__floatsisf+0x40>
 cc2:	f9 2f       	mov	r31, r25
 cc4:	96 e9       	ldi	r25, 0x96	; 150
 cc6:	bb 27       	eor	r27, r27
 cc8:	93 95       	inc	r25
 cca:	f6 95       	lsr	r31
 ccc:	87 95       	ror	r24
 cce:	77 95       	ror	r23
 cd0:	67 95       	ror	r22
 cd2:	b7 95       	ror	r27
 cd4:	f1 11       	cpse	r31, r1
 cd6:	f8 cf       	rjmp	.-16     	; 0xcc8 <__floatsisf+0x1c>
 cd8:	fa f4       	brpl	.+62     	; 0xd18 <__floatsisf+0x6c>
 cda:	bb 0f       	add	r27, r27
 cdc:	11 f4       	brne	.+4      	; 0xce2 <__floatsisf+0x36>
 cde:	60 ff       	sbrs	r22, 0
 ce0:	1b c0       	rjmp	.+54     	; 0xd18 <__floatsisf+0x6c>
 ce2:	6f 5f       	subi	r22, 0xFF	; 255
 ce4:	7f 4f       	sbci	r23, 0xFF	; 255
 ce6:	8f 4f       	sbci	r24, 0xFF	; 255
 ce8:	9f 4f       	sbci	r25, 0xFF	; 255
 cea:	16 c0       	rjmp	.+44     	; 0xd18 <__floatsisf+0x6c>
 cec:	88 23       	and	r24, r24
 cee:	11 f0       	breq	.+4      	; 0xcf4 <__floatsisf+0x48>
 cf0:	96 e9       	ldi	r25, 0x96	; 150
 cf2:	11 c0       	rjmp	.+34     	; 0xd16 <__floatsisf+0x6a>
 cf4:	77 23       	and	r23, r23
 cf6:	21 f0       	breq	.+8      	; 0xd00 <__floatsisf+0x54>
 cf8:	9e e8       	ldi	r25, 0x8E	; 142
 cfa:	87 2f       	mov	r24, r23
 cfc:	76 2f       	mov	r23, r22
 cfe:	05 c0       	rjmp	.+10     	; 0xd0a <__floatsisf+0x5e>
 d00:	66 23       	and	r22, r22
 d02:	71 f0       	breq	.+28     	; 0xd20 <__floatsisf+0x74>
 d04:	96 e8       	ldi	r25, 0x86	; 134
 d06:	86 2f       	mov	r24, r22
 d08:	70 e0       	ldi	r23, 0x00	; 0
 d0a:	60 e0       	ldi	r22, 0x00	; 0
 d0c:	2a f0       	brmi	.+10     	; 0xd18 <__floatsisf+0x6c>
 d0e:	9a 95       	dec	r25
 d10:	66 0f       	add	r22, r22
 d12:	77 1f       	adc	r23, r23
 d14:	88 1f       	adc	r24, r24
 d16:	da f7       	brpl	.-10     	; 0xd0e <__floatsisf+0x62>
 d18:	88 0f       	add	r24, r24
 d1a:	96 95       	lsr	r25
 d1c:	87 95       	ror	r24
 d1e:	97 f9       	bld	r25, 7
 d20:	08 95       	ret

00000d22 <__fp_cmp>:
 d22:	99 0f       	add	r25, r25
 d24:	00 08       	sbc	r0, r0
 d26:	55 0f       	add	r21, r21
 d28:	aa 0b       	sbc	r26, r26
 d2a:	e0 e8       	ldi	r30, 0x80	; 128
 d2c:	fe ef       	ldi	r31, 0xFE	; 254
 d2e:	16 16       	cp	r1, r22
 d30:	17 06       	cpc	r1, r23
 d32:	e8 07       	cpc	r30, r24
 d34:	f9 07       	cpc	r31, r25
 d36:	c0 f0       	brcs	.+48     	; 0xd68 <__fp_cmp+0x46>
 d38:	12 16       	cp	r1, r18
 d3a:	13 06       	cpc	r1, r19
 d3c:	e4 07       	cpc	r30, r20
 d3e:	f5 07       	cpc	r31, r21
 d40:	98 f0       	brcs	.+38     	; 0xd68 <__fp_cmp+0x46>
 d42:	62 1b       	sub	r22, r18
 d44:	73 0b       	sbc	r23, r19
 d46:	84 0b       	sbc	r24, r20
 d48:	95 0b       	sbc	r25, r21
 d4a:	39 f4       	brne	.+14     	; 0xd5a <__fp_cmp+0x38>
 d4c:	0a 26       	eor	r0, r26
 d4e:	61 f0       	breq	.+24     	; 0xd68 <__fp_cmp+0x46>
 d50:	23 2b       	or	r18, r19
 d52:	24 2b       	or	r18, r20
 d54:	25 2b       	or	r18, r21
 d56:	21 f4       	brne	.+8      	; 0xd60 <__fp_cmp+0x3e>
 d58:	08 95       	ret
 d5a:	0a 26       	eor	r0, r26
 d5c:	09 f4       	brne	.+2      	; 0xd60 <__fp_cmp+0x3e>
 d5e:	a1 40       	sbci	r26, 0x01	; 1
 d60:	a6 95       	lsr	r26
 d62:	8f ef       	ldi	r24, 0xFF	; 255
 d64:	81 1d       	adc	r24, r1
 d66:	81 1d       	adc	r24, r1
 d68:	08 95       	ret

00000d6a <__fp_inf>:
 d6a:	97 f9       	bld	r25, 7
 d6c:	9f 67       	ori	r25, 0x7F	; 127
 d6e:	80 e8       	ldi	r24, 0x80	; 128
 d70:	70 e0       	ldi	r23, 0x00	; 0
 d72:	60 e0       	ldi	r22, 0x00	; 0
 d74:	08 95       	ret

00000d76 <__fp_nan>:
 d76:	9f ef       	ldi	r25, 0xFF	; 255
 d78:	80 ec       	ldi	r24, 0xC0	; 192
 d7a:	08 95       	ret

00000d7c <__fp_pscA>:
 d7c:	00 24       	eor	r0, r0
 d7e:	0a 94       	dec	r0
 d80:	16 16       	cp	r1, r22
 d82:	17 06       	cpc	r1, r23
 d84:	18 06       	cpc	r1, r24
 d86:	09 06       	cpc	r0, r25
 d88:	08 95       	ret

00000d8a <__fp_pscB>:
 d8a:	00 24       	eor	r0, r0
 d8c:	0a 94       	dec	r0
 d8e:	12 16       	cp	r1, r18
 d90:	13 06       	cpc	r1, r19
 d92:	14 06       	cpc	r1, r20
 d94:	05 06       	cpc	r0, r21
 d96:	08 95       	ret

00000d98 <__fp_round>:
 d98:	09 2e       	mov	r0, r25
 d9a:	03 94       	inc	r0
 d9c:	00 0c       	add	r0, r0
 d9e:	11 f4       	brne	.+4      	; 0xda4 <__fp_round+0xc>
 da0:	88 23       	and	r24, r24
 da2:	52 f0       	brmi	.+20     	; 0xdb8 <__fp_round+0x20>
 da4:	bb 0f       	add	r27, r27
 da6:	40 f4       	brcc	.+16     	; 0xdb8 <__fp_round+0x20>
 da8:	bf 2b       	or	r27, r31
 daa:	11 f4       	brne	.+4      	; 0xdb0 <__fp_round+0x18>
 dac:	60 ff       	sbrs	r22, 0
 dae:	04 c0       	rjmp	.+8      	; 0xdb8 <__fp_round+0x20>
 db0:	6f 5f       	subi	r22, 0xFF	; 255
 db2:	7f 4f       	sbci	r23, 0xFF	; 255
 db4:	8f 4f       	sbci	r24, 0xFF	; 255
 db6:	9f 4f       	sbci	r25, 0xFF	; 255
 db8:	08 95       	ret

00000dba <__fp_split3>:
 dba:	57 fd       	sbrc	r21, 7
 dbc:	90 58       	subi	r25, 0x80	; 128
 dbe:	44 0f       	add	r20, r20
 dc0:	55 1f       	adc	r21, r21
 dc2:	59 f0       	breq	.+22     	; 0xdda <__fp_splitA+0x10>
 dc4:	5f 3f       	cpi	r21, 0xFF	; 255
 dc6:	71 f0       	breq	.+28     	; 0xde4 <__fp_splitA+0x1a>
 dc8:	47 95       	ror	r20

00000dca <__fp_splitA>:
 dca:	88 0f       	add	r24, r24
 dcc:	97 fb       	bst	r25, 7
 dce:	99 1f       	adc	r25, r25
 dd0:	61 f0       	breq	.+24     	; 0xdea <__fp_splitA+0x20>
 dd2:	9f 3f       	cpi	r25, 0xFF	; 255
 dd4:	79 f0       	breq	.+30     	; 0xdf4 <__fp_splitA+0x2a>
 dd6:	87 95       	ror	r24
 dd8:	08 95       	ret
 dda:	12 16       	cp	r1, r18
 ddc:	13 06       	cpc	r1, r19
 dde:	14 06       	cpc	r1, r20
 de0:	55 1f       	adc	r21, r21
 de2:	f2 cf       	rjmp	.-28     	; 0xdc8 <__fp_split3+0xe>
 de4:	46 95       	lsr	r20
 de6:	f1 df       	rcall	.-30     	; 0xdca <__fp_splitA>
 de8:	08 c0       	rjmp	.+16     	; 0xdfa <__fp_splitA+0x30>
 dea:	16 16       	cp	r1, r22
 dec:	17 06       	cpc	r1, r23
 dee:	18 06       	cpc	r1, r24
 df0:	99 1f       	adc	r25, r25
 df2:	f1 cf       	rjmp	.-30     	; 0xdd6 <__fp_splitA+0xc>
 df4:	86 95       	lsr	r24
 df6:	71 05       	cpc	r23, r1
 df8:	61 05       	cpc	r22, r1
 dfa:	08 94       	sec
 dfc:	08 95       	ret

00000dfe <__fp_zero>:
 dfe:	e8 94       	clt

00000e00 <__fp_szero>:
 e00:	bb 27       	eor	r27, r27
 e02:	66 27       	eor	r22, r22
 e04:	77 27       	eor	r23, r23
 e06:	cb 01       	movw	r24, r22
 e08:	97 f9       	bld	r25, 7
 e0a:	08 95       	ret

00000e0c <__mulsf3>:
 e0c:	0b d0       	rcall	.+22     	; 0xe24 <__mulsf3x>
 e0e:	c4 cf       	rjmp	.-120    	; 0xd98 <__fp_round>
 e10:	b5 df       	rcall	.-150    	; 0xd7c <__fp_pscA>
 e12:	28 f0       	brcs	.+10     	; 0xe1e <__mulsf3+0x12>
 e14:	ba df       	rcall	.-140    	; 0xd8a <__fp_pscB>
 e16:	18 f0       	brcs	.+6      	; 0xe1e <__mulsf3+0x12>
 e18:	95 23       	and	r25, r21
 e1a:	09 f0       	breq	.+2      	; 0xe1e <__mulsf3+0x12>
 e1c:	a6 cf       	rjmp	.-180    	; 0xd6a <__fp_inf>
 e1e:	ab cf       	rjmp	.-170    	; 0xd76 <__fp_nan>
 e20:	11 24       	eor	r1, r1
 e22:	ee cf       	rjmp	.-36     	; 0xe00 <__fp_szero>

00000e24 <__mulsf3x>:
 e24:	ca df       	rcall	.-108    	; 0xdba <__fp_split3>
 e26:	a0 f3       	brcs	.-24     	; 0xe10 <__mulsf3+0x4>

00000e28 <__mulsf3_pse>:
 e28:	95 9f       	mul	r25, r21
 e2a:	d1 f3       	breq	.-12     	; 0xe20 <__mulsf3+0x14>
 e2c:	95 0f       	add	r25, r21
 e2e:	50 e0       	ldi	r21, 0x00	; 0
 e30:	55 1f       	adc	r21, r21
 e32:	62 9f       	mul	r22, r18
 e34:	f0 01       	movw	r30, r0
 e36:	72 9f       	mul	r23, r18
 e38:	bb 27       	eor	r27, r27
 e3a:	f0 0d       	add	r31, r0
 e3c:	b1 1d       	adc	r27, r1
 e3e:	63 9f       	mul	r22, r19
 e40:	aa 27       	eor	r26, r26
 e42:	f0 0d       	add	r31, r0
 e44:	b1 1d       	adc	r27, r1
 e46:	aa 1f       	adc	r26, r26
 e48:	64 9f       	mul	r22, r20
 e4a:	66 27       	eor	r22, r22
 e4c:	b0 0d       	add	r27, r0
 e4e:	a1 1d       	adc	r26, r1
 e50:	66 1f       	adc	r22, r22
 e52:	82 9f       	mul	r24, r18
 e54:	22 27       	eor	r18, r18
 e56:	b0 0d       	add	r27, r0
 e58:	a1 1d       	adc	r26, r1
 e5a:	62 1f       	adc	r22, r18
 e5c:	73 9f       	mul	r23, r19
 e5e:	b0 0d       	add	r27, r0
 e60:	a1 1d       	adc	r26, r1
 e62:	62 1f       	adc	r22, r18
 e64:	83 9f       	mul	r24, r19
 e66:	a0 0d       	add	r26, r0
 e68:	61 1d       	adc	r22, r1
 e6a:	22 1f       	adc	r18, r18
 e6c:	74 9f       	mul	r23, r20
 e6e:	33 27       	eor	r19, r19
 e70:	a0 0d       	add	r26, r0
 e72:	61 1d       	adc	r22, r1
 e74:	23 1f       	adc	r18, r19
 e76:	84 9f       	mul	r24, r20
 e78:	60 0d       	add	r22, r0
 e7a:	21 1d       	adc	r18, r1
 e7c:	82 2f       	mov	r24, r18
 e7e:	76 2f       	mov	r23, r22
 e80:	6a 2f       	mov	r22, r26
 e82:	11 24       	eor	r1, r1
 e84:	9f 57       	subi	r25, 0x7F	; 127
 e86:	50 40       	sbci	r21, 0x00	; 0
 e88:	8a f0       	brmi	.+34     	; 0xeac <__mulsf3_pse+0x84>
 e8a:	e1 f0       	breq	.+56     	; 0xec4 <__mulsf3_pse+0x9c>
 e8c:	88 23       	and	r24, r24
 e8e:	4a f0       	brmi	.+18     	; 0xea2 <__mulsf3_pse+0x7a>
 e90:	ee 0f       	add	r30, r30
 e92:	ff 1f       	adc	r31, r31
 e94:	bb 1f       	adc	r27, r27
 e96:	66 1f       	adc	r22, r22
 e98:	77 1f       	adc	r23, r23
 e9a:	88 1f       	adc	r24, r24
 e9c:	91 50       	subi	r25, 0x01	; 1
 e9e:	50 40       	sbci	r21, 0x00	; 0
 ea0:	a9 f7       	brne	.-22     	; 0xe8c <__mulsf3_pse+0x64>
 ea2:	9e 3f       	cpi	r25, 0xFE	; 254
 ea4:	51 05       	cpc	r21, r1
 ea6:	70 f0       	brcs	.+28     	; 0xec4 <__mulsf3_pse+0x9c>
 ea8:	60 cf       	rjmp	.-320    	; 0xd6a <__fp_inf>
 eaa:	aa cf       	rjmp	.-172    	; 0xe00 <__fp_szero>
 eac:	5f 3f       	cpi	r21, 0xFF	; 255
 eae:	ec f3       	brlt	.-6      	; 0xeaa <__mulsf3_pse+0x82>
 eb0:	98 3e       	cpi	r25, 0xE8	; 232
 eb2:	dc f3       	brlt	.-10     	; 0xeaa <__mulsf3_pse+0x82>
 eb4:	86 95       	lsr	r24
 eb6:	77 95       	ror	r23
 eb8:	67 95       	ror	r22
 eba:	b7 95       	ror	r27
 ebc:	f7 95       	ror	r31
 ebe:	e7 95       	ror	r30
 ec0:	9f 5f       	subi	r25, 0xFF	; 255
 ec2:	c1 f7       	brne	.-16     	; 0xeb4 <__mulsf3_pse+0x8c>
 ec4:	fe 2b       	or	r31, r30
 ec6:	88 0f       	add	r24, r24
 ec8:	91 1d       	adc	r25, r1
 eca:	96 95       	lsr	r25
 ecc:	87 95       	ror	r24
 ece:	97 f9       	bld	r25, 7
 ed0:	08 95       	ret

00000ed2 <__udivmodhi4>:
 ed2:	aa 1b       	sub	r26, r26
 ed4:	bb 1b       	sub	r27, r27
 ed6:	51 e1       	ldi	r21, 0x11	; 17
 ed8:	07 c0       	rjmp	.+14     	; 0xee8 <__udivmodhi4_ep>

00000eda <__udivmodhi4_loop>:
 eda:	aa 1f       	adc	r26, r26
 edc:	bb 1f       	adc	r27, r27
 ede:	a6 17       	cp	r26, r22
 ee0:	b7 07       	cpc	r27, r23
 ee2:	10 f0       	brcs	.+4      	; 0xee8 <__udivmodhi4_ep>
 ee4:	a6 1b       	sub	r26, r22
 ee6:	b7 0b       	sbc	r27, r23

00000ee8 <__udivmodhi4_ep>:
 ee8:	88 1f       	adc	r24, r24
 eea:	99 1f       	adc	r25, r25
 eec:	5a 95       	dec	r21
 eee:	a9 f7       	brne	.-22     	; 0xeda <__udivmodhi4_loop>
 ef0:	80 95       	com	r24
 ef2:	90 95       	com	r25
 ef4:	bc 01       	movw	r22, r24
 ef6:	cd 01       	movw	r24, r26
 ef8:	08 95       	ret

00000efa <__divmodhi4>:
 efa:	97 fb       	bst	r25, 7
 efc:	09 2e       	mov	r0, r25
 efe:	07 26       	eor	r0, r23
 f00:	0a d0       	rcall	.+20     	; 0xf16 <__divmodhi4_neg1>
 f02:	77 fd       	sbrc	r23, 7
 f04:	04 d0       	rcall	.+8      	; 0xf0e <__divmodhi4_neg2>
 f06:	e5 df       	rcall	.-54     	; 0xed2 <__udivmodhi4>
 f08:	06 d0       	rcall	.+12     	; 0xf16 <__divmodhi4_neg1>
 f0a:	00 20       	and	r0, r0
 f0c:	1a f4       	brpl	.+6      	; 0xf14 <__divmodhi4_exit>

00000f0e <__divmodhi4_neg2>:
 f0e:	70 95       	com	r23
 f10:	61 95       	neg	r22
 f12:	7f 4f       	sbci	r23, 0xFF	; 255

00000f14 <__divmodhi4_exit>:
 f14:	08 95       	ret

00000f16 <__divmodhi4_neg1>:
 f16:	f6 f7       	brtc	.-4      	; 0xf14 <__divmodhi4_exit>
 f18:	90 95       	com	r25
 f1a:	81 95       	neg	r24
 f1c:	9f 4f       	sbci	r25, 0xFF	; 255
 f1e:	08 95       	ret

00000f20 <_exit>:
 f20:	f8 94       	cli

00000f22 <__stop_program>:
 f22:	ff cf       	rjmp	.-2      	; 0xf22 <__stop_program>
