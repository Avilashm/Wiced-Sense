
FirebirdTest1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000328  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800200  00800200  0000039c  2**0
                  ALLOC
  2 .stab         000006e4  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  00000b08  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000573  00000000  00000000  00000b88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000020f  00000000  00000000  000010fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c4  00000000  00000000  0000130a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e4  00000000  00000000  000016d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001b5  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c9  00000000  00000000  00001969  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__vector_25>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e2       	ldi	r30, 0x28	; 40
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a3 30       	cpi	r26, 0x03	; 3
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 1f 01 	call	0x23e	; 0x23e <main>
 122:	0c 94 92 01 	jmp	0x324	; 0x324 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <LED_bargraph_config>:
}


void LED_bargraph_config (void)
{
	DDRJ = 0xFF;  //PORT J is configured as output
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	80 93 04 01 	sts	0x0104, r24
	PORTJ = 0x00; //Output is set to 0
 130:	10 92 05 01 	sts	0x0105, r1
}
 134:	08 95       	ret

00000136 <motion_pin_config>:
void data_in(char*);

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
 DDRA = DDRA | 0x0F;
 136:	81 b1       	in	r24, 0x01	; 1
 138:	8f 60       	ori	r24, 0x0F	; 15
 13a:	81 b9       	out	0x01, r24	; 1
 PORTA = PORTA & 0xF0;
 13c:	82 b1       	in	r24, 0x02	; 2
 13e:	80 7f       	andi	r24, 0xF0	; 240
 140:	82 b9       	out	0x02, r24	; 2
 DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 142:	ea e0       	ldi	r30, 0x0A	; 10
 144:	f1 e0       	ldi	r31, 0x01	; 1
 146:	80 81       	ld	r24, Z
 148:	88 61       	ori	r24, 0x18	; 24
 14a:	80 83       	st	Z, r24
 PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 14c:	eb e0       	ldi	r30, 0x0B	; 11
 14e:	f1 e0       	ldi	r31, 0x01	; 1
 150:	80 81       	ld	r24, Z
 152:	88 61       	ori	r24, 0x18	; 24
 154:	80 83       	st	Z, r24
}
 156:	08 95       	ret

00000158 <init_ports>:

//Function to initialize ports
void init_ports()
{
 motion_pin_config();
 158:	0e 94 9b 00 	call	0x136	; 0x136 <motion_pin_config>
 LED_bargraph_config();
 15c:	0e 94 95 00 	call	0x12a	; 0x12a <LED_bargraph_config>
}
 160:	08 95       	ret

00000162 <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	UCSR0B = 0x00; //disable while setting baud rate
 162:	e1 ec       	ldi	r30, 0xC1	; 193
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	10 82       	st	Z, r1
	UCSR0A = 0x00;
 168:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0C = 0x06;
 16c:	86 e0       	ldi	r24, 0x06	; 6
 16e:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0L = 0x5F; //set baud rate lo
 172:	8f e5       	ldi	r24, 0x5F	; 95
 174:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0x00; //set baud rate hi
 178:	10 92 c5 00 	sts	0x00C5, r1
	UCSR0B = 0x98;
 17c:	88 e9       	ldi	r24, 0x98	; 152
 17e:	80 83       	st	Z, r24
}
 180:	08 95       	ret

00000182 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
 182:	e1 e2       	ldi	r30, 0x21	; 33
 184:	f1 e0       	ldi	r31, 0x01	; 1
 186:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
 194:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
 198:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
 19c:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
 1a0:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
 1a4:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
 1a8:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 1ac:	89 ea       	ldi	r24, 0xA9	; 169
 1ae:	80 93 20 01 	sts	0x0120, r24
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
 1b2:	8b e0       	ldi	r24, 0x0B	; 11
 1b4:	80 83       	st	Z, r24
}
 1b6:	08 95       	ret

000001b8 <velocity>:

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
 1b8:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
 1bc:	60 93 2a 01 	sts	0x012A, r22
}
 1c0:	08 95       	ret

000001c2 <motion_set>:
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 PortARestore = PORTA; 			// reading the PORTA's original status
 1c2:	92 b1       	in	r25, 0x02	; 2
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
 1c4:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
 unsigned char PortARestore = 0;

 Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 1c6:	8f 70       	andi	r24, 0x0F	; 15
 PortARestore = PORTA; 			// reading the PORTA's original status
 PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
 PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 1c8:	98 2b       	or	r25, r24
 PORTA = PortARestore; 			// setting the command to the port
 1ca:	92 b9       	out	0x02, r25	; 2
}
 1cc:	08 95       	ret

000001ce <forward>:


void forward (void) //both wheels forward
{
  motion_set(0x06);
 1ce:	86 e0       	ldi	r24, 0x06	; 6
 1d0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <motion_set>
}
 1d4:	08 95       	ret

000001d6 <init_devices>:


void init_devices (void) //use this function to initialize all devices
{
 cli(); //disable all interrupts
 1d6:	f8 94       	cli
 init_ports();
 1d8:	0e 94 ac 00 	call	0x158	; 0x158 <init_ports>
 timer5_init();
 1dc:	0e 94 c1 00 	call	0x182	; 0x182 <timer5_init>
 uart0_init();
 1e0:	0e 94 b1 00 	call	0x162	; 0x162 <uart0_init>
 sei(); //re-enable interrupts
 1e4:	78 94       	sei
}
 1e6:	08 95       	ret

000001e8 <__vector_25>:

SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	0b b6       	in	r0, 0x3b	; 59
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	ef 93       	push	r30
 1fc:	ff 93       	push	r31
	data = UDR0;
 1fe:	e6 ec       	ldi	r30, 0xC6	; 198
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	80 93 02 02 	sts	0x0202, r24
	UDR0 = data;
 208:	80 83       	st	Z, r24
	if (data == 0x35)
 20a:	85 33       	cpi	r24, 0x35	; 53
 20c:	29 f4       	brne	.+10     	; 0x218 <__vector_25+0x30>
	{
		b=0;
 20e:	10 92 01 02 	sts	0x0201, r1
 212:	10 92 00 02 	sts	0x0200, r1
 216:	08 c0       	rjmp	.+16     	; 0x228 <__vector_25+0x40>
	}
	if(data == 0x38)
 218:	88 33       	cpi	r24, 0x38	; 56
 21a:	31 f4       	brne	.+12     	; 0x228 <__vector_25+0x40>
	{
	b=1;
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	90 93 01 02 	sts	0x0201, r25
 224:	80 93 00 02 	sts	0x0200, r24
	}	
    
		
			
			
}	
 228:	ff 91       	pop	r31
 22a:	ef 91       	pop	r30
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	0f 90       	pop	r0
 232:	0b be       	out	0x3b, r0	; 59
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <main>:


//Main Function
int main()
{
	init_devices();
 23e:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <init_devices>
			for (int a=50; a<255;a++)
			{
				velocity (a, a); //Increasing the robot velocity
				forward(); //both wheels forward
				_delay_ms(100);
			if(a>49){PORTJ = 0x01;} //Turning Bar graph led ON.
 242:	05 e0       	ldi	r16, 0x05	; 5
 244:	11 e0       	ldi	r17, 0x01	; 1
 246:	ee 24       	eor	r14, r14
 248:	e3 94       	inc	r14
			if(a>75){PORTJ = 0x03;}
				if(a>100){PORTJ = 0x07;}
 24a:	0f 2e       	mov	r0, r31
 24c:	f7 e0       	ldi	r31, 0x07	; 7
 24e:	df 2e       	mov	r13, r31
 250:	f0 2d       	mov	r31, r0
					if(a>125){PORTJ = 0x0F;}
 252:	0f 2e       	mov	r0, r31
 254:	ff e0       	ldi	r31, 0x0F	; 15
 256:	cf 2e       	mov	r12, r31
 258:	f0 2d       	mov	r31, r0
						if(a>150){PORTJ = 0x1F;}
 25a:	0f 2e       	mov	r0, r31
 25c:	ff e1       	ldi	r31, 0x1F	; 31
 25e:	bf 2e       	mov	r11, r31
 260:	f0 2d       	mov	r31, r0
							if(a>175){PORTJ = 0x3F;}
 262:	0f 2e       	mov	r0, r31
 264:	ff e3       	ldi	r31, 0x3F	; 63
 266:	af 2e       	mov	r10, r31
 268:	f0 2d       	mov	r31, r0
								if(a>200){PORTJ = 0x7F;}
 26a:	0f 2e       	mov	r0, r31
 26c:	ff e7       	ldi	r31, 0x7F	; 127
 26e:	9f 2e       	mov	r9, r31
 270:	f0 2d       	mov	r31, r0
{
	init_devices();
	
	while(1)
	{
			velocity (0, 0);
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <velocity>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27a:	8f ef       	ldi	r24, 0xFF	; 255
 27c:	9f e7       	ldi	r25, 0x7F	; 127
 27e:	a4 e0       	ldi	r26, 0x04	; 4
 280:	81 50       	subi	r24, 0x01	; 1
 282:	90 40       	sbci	r25, 0x00	; 0
 284:	a0 40       	sbci	r26, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <main+0x42>
 288:	00 c0       	rjmp	.+0      	; 0x28a <main+0x4c>
 28a:	00 00       	nop
			_delay_ms(100);
		
		if(b == 1)
 28c:	80 91 00 02 	lds	r24, 0x0200
 290:	90 91 01 02 	lds	r25, 0x0201
 294:	81 30       	cpi	r24, 0x01	; 1
 296:	91 05       	cpc	r25, r1
 298:	61 f7       	brne	.-40     	; 0x272 <main+0x34>
		{
			//enable global interrupts
			sei();
 29a:	78 94       	sei
			for (int a=50; a<255;a++)
 29c:	c2 e3       	ldi	r28, 0x32	; 50
 29e:	d0 e0       	ldi	r29, 0x00	; 0
			{
				velocity (a, a); //Increasing the robot velocity
				forward(); //both wheels forward
				_delay_ms(100);
			if(a>49){PORTJ = 0x01;} //Turning Bar graph led ON.
			if(a>75){PORTJ = 0x03;}
 2a0:	0f 2e       	mov	r0, r31
 2a2:	f3 e0       	ldi	r31, 0x03	; 3
 2a4:	ff 2e       	mov	r15, r31
 2a6:	f0 2d       	mov	r31, r0
		{
			//enable global interrupts
			sei();
			for (int a=50; a<255;a++)
			{
				velocity (a, a); //Increasing the robot velocity
 2a8:	8c 2f       	mov	r24, r28
 2aa:	6c 2f       	mov	r22, r28
 2ac:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <velocity>
				forward(); //both wheels forward
 2b0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <forward>
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	9f e7       	ldi	r25, 0x7F	; 127
 2b8:	a4 e0       	ldi	r26, 0x04	; 4
 2ba:	81 50       	subi	r24, 0x01	; 1
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	a0 40       	sbci	r26, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <main+0x7c>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <main+0x86>
 2c4:	00 00       	nop
				_delay_ms(100);
			if(a>49){PORTJ = 0x01;} //Turning Bar graph led ON.
 2c6:	c2 33       	cpi	r28, 0x32	; 50
 2c8:	d1 05       	cpc	r29, r1
 2ca:	14 f0       	brlt	.+4      	; 0x2d0 <main+0x92>
 2cc:	d8 01       	movw	r26, r16
 2ce:	ec 92       	st	X, r14
			if(a>75){PORTJ = 0x03;}
 2d0:	cc 34       	cpi	r28, 0x4C	; 76
 2d2:	d1 05       	cpc	r29, r1
 2d4:	14 f0       	brlt	.+4      	; 0x2da <main+0x9c>
 2d6:	f8 01       	movw	r30, r16
 2d8:	f0 82       	st	Z, r15
				if(a>100){PORTJ = 0x07;}
 2da:	c5 36       	cpi	r28, 0x65	; 101
 2dc:	d1 05       	cpc	r29, r1
 2de:	14 f0       	brlt	.+4      	; 0x2e4 <main+0xa6>
 2e0:	d8 01       	movw	r26, r16
 2e2:	dc 92       	st	X, r13
					if(a>125){PORTJ = 0x0F;}
 2e4:	ce 37       	cpi	r28, 0x7E	; 126
 2e6:	d1 05       	cpc	r29, r1
 2e8:	14 f0       	brlt	.+4      	; 0x2ee <main+0xb0>
 2ea:	f8 01       	movw	r30, r16
 2ec:	c0 82       	st	Z, r12
						if(a>150){PORTJ = 0x1F;}
 2ee:	c7 39       	cpi	r28, 0x97	; 151
 2f0:	d1 05       	cpc	r29, r1
 2f2:	14 f0       	brlt	.+4      	; 0x2f8 <main+0xba>
 2f4:	d8 01       	movw	r26, r16
 2f6:	bc 92       	st	X, r11
							if(a>175){PORTJ = 0x3F;}
 2f8:	c0 3b       	cpi	r28, 0xB0	; 176
 2fa:	d1 05       	cpc	r29, r1
 2fc:	14 f0       	brlt	.+4      	; 0x302 <main+0xc4>
 2fe:	f8 01       	movw	r30, r16
 300:	a0 82       	st	Z, r10
								if(a>200){PORTJ = 0x7F;}
 302:	c9 3c       	cpi	r28, 0xC9	; 201
 304:	d1 05       	cpc	r29, r1
 306:	14 f0       	brlt	.+4      	; 0x30c <main+0xce>
 308:	d8 01       	movw	r26, r16
 30a:	9c 92       	st	X, r9
									if(b == 0){break;}
 30c:	80 91 00 02 	lds	r24, 0x0200
 310:	90 91 01 02 	lds	r25, 0x0201
 314:	00 97       	sbiw	r24, 0x00	; 0
 316:	09 f4       	brne	.+2      	; 0x31a <main+0xdc>
 318:	ac cf       	rjmp	.-168    	; 0x272 <main+0x34>
		
		if(b == 1)
		{
			//enable global interrupts
			sei();
			for (int a=50; a<255;a++)
 31a:	21 96       	adiw	r28, 0x01	; 1
 31c:	cf 3f       	cpi	r28, 0xFF	; 255
 31e:	d1 05       	cpc	r29, r1
 320:	19 f6       	brne	.-122    	; 0x2a8 <main+0x6a>
 322:	a7 cf       	rjmp	.-178    	; 0x272 <main+0x34>

00000324 <_exit>:
 324:	f8 94       	cli

00000326 <__stop_program>:
 326:	ff cf       	rjmp	.-2      	; 0x326 <__stop_program>
